theory ADEM begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pk/1, sha256/1, sign/2, snd/1,
           tlsClientMsg/4, tlsClientReceive/2, tlsServerMsg/4,
           tlsServerReceive/2, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    tlsClientReceive(tlsServerMsg(sess, d, sk, m), sess) = m,
    tlsServerReceive(tlsClientMsg(sess, d, pk(sk), m), sk) = sess,
    tlsServerReceive(tlsClientMsg(sess, d, pk(sk), m), sk) = m,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true




rule (modulo E) DomainRegister:
   [ DomainRegister( $A, d ) ]
  --[ OnlyOnce( <'domain_register', d> ), NoTuple( d ) ]->
   [ !DomainOwner( $A, d ) ]

  /* has exactly the trivial AC variant */

restriction NoTuple:
  "∀ m #t. (NoTuple( m ) @ #t) ⇒ (¬(∃ l r. m = <l, r>))"
  // safety formula

rule (modulo E) SubdomainRegister:
   [ DomainRegister( $A, <d, sub> ), !DomainOwner( $A, d ) ]
  --[ OnlyOnce( <'domain_register', d, sub> ) ]->
   [ !DomainOwner( $A, <d, sub> ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) DomainCompromise:
   [ In( $A ), In( d ) ]
  --[ CompromisedDomainOwner( $A ), SomeCompromise( ) ]->
   [ DomainRegister( $A, d ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CA:
   [ Fr( ~skCA ) ]
  --[ CASk( $CA, ~skCA ), OnlyOnce( <'CA', $CA> ) ]->
   [ !CA( $CA, ~skCA ), Out( pk(~skCA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) FraudulentCertificate:
   [ !CA( $CA, ~skCA ), In( m ) ]
  --[
  SigningOracleCA( $CA, m ), CompromisedCA( $CA ),
  CompromisedParty( $CA ), SomeCompromise( )
  ]->
   [ Out( sign(m, ~skCA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSKeyRegister:
   [ !DomainOwner( $A, d ), !CA( $CA, skCA ), Fr( ~skUser ) ]
  --[ OnlyOnce( <'tls_key', d> ), TLSKeyGen( ~skUser ) ]->
   [ !TLSKey( $A, $CA, d, ~skUser ), Out( pk(~skUser) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSKeyShare:
   [ !TLSKey( $A, $CA, d1, ~skUser ), !DomainOwner( $A, d2 ) ]
  --[
  TLSKeyShare( ~skUser ), OnlyOnce( <'tls_key', d2> ),
  Eq( d1, fst(d2) )
  ]->
   [ !TLSKey( $A, $CA, d2, ~skUser ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) TLSKeyShare:
     [ !TLSKey( $A, $CA, d1, ~skUser ), !DomainOwner( $A, d2 ) ]
    --[
    TLSKeyShare( ~skUser ), OnlyOnce( <'tls_key', d2> ), Eq( d1, z )
    ]->
     [ !TLSKey( $A, $CA, d2, ~skUser ) ]
    variants (modulo AC)
    1. d2    = d2.9
       z     = fst(d2.9)

    2. d2    = <z.10, x.12>
       z     = z.10
    // loop breaker: [0]
  */

rule (modulo E) TLSKeyLeak:
   [ !TLSKey( $A, $CA, d, ~skUser ) ]
  --[ CompromisedTLSKey( ~skUser ), SomeCompromise( ) ]->
   [ Out( ~skUser ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CertificateRequest:
   [
   !DomainOwner( $A, d ), !TLSKey( $A, $CA, d, ~skTLS ),
   !CA( $CA, ~skCA )
   ]
  --[ OnlyOnce( <'certificate', d> ) ]->
   [ Out( sign(<'cert', $CA, d, pk(~skTLS)>, ~skCA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LogRegister:
   [ Fr( ~skCT ) ] --[ IsLog( $Log ) ]-> [ !Log( $Log, ~skCT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Submit:
   [
   !CA( $CA, skCA ), !Log( $Log, skCT ),
   In( <<'cert', $CA, d, pk>, certSig> )
   ]
  --[
  Eq( verify(certSig, <'cert', $CA, d, pk>, pk(skCA)), true ),
  Eq( fst(snd(<'cert', $CA, d, pk>)), $CA ),
  LogInclusion( $Log, <<'cert', $CA, d, pk>, certSig> )
  ]->
   [ !MHTLeaf( $Log, <<'cert', $CA, d, pk>, certSig> ) ]

  /*
  rule (modulo AC) Submit:
     [
     !CA( $CA, skCA ), !Log( $Log, skCT ),
     In( <<'cert', $CA, d, pk>, certSig> )
     ]
    --[
    Eq( z, true ), Eq( $CA, $CA ),
    LogInclusion( $Log, <<'cert', $CA, d, pk>, certSig> )
    ]->
     [ !MHTLeaf( $Log, <<'cert', $CA, d, pk>, certSig> ) ]
    variants (modulo AC)
    1. $CA   = $CA.16
       certSig
             = certSig.18
       d     = d.19
       pk    = pk.20
       skCA  = skCA.21
       z     = verify(certSig.18, <'cert', $CA.16, d.19, pk.20>,
                      pk(skCA.21))

    2. $CA   = $CA.16
       certSig
             = sign(<'cert', $CA.16, d.19, pk.20>, skCA.21)
       d     = d.19
       pk    = pk.20
       skCA  = skCA.21
       z     = true
  */

rule (modulo E) AdversarialAppend:
   [ In( msg ) ]
  --[
  LogInclusion( $Log, msg ), CompromisedParty( $Log ),
  SomeCompromise( )
  ]->
   [ !MHTLeaf( $Log, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MHTLeafReq:
   [
   !CA( $CA, skCA ), !Log( $Log, skCT ),
   !MHTLeaf( $Log, <<'cert', $CA, d, pk>, certSig> ),
   In( <'MHTLeafReq', $Log, d> )
   ]
  --[ LeafReq( $Log ) ]->
   [
   Out( sign(<'MHTLeaf', $Log, <'cert', $CA, d, pk>, certSig>, skCT) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk:
   [ Fr( ~rootKey ) ]
  -->
   [ !Ltk( $A, ~rootKey ), Out( pk(~rootKey) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !Ltk( $A, ~ltk ) ]
  --[
  CompromisedADEMParty( $A, pk(~ltk) ), CompromisedParty( $A ),
  SomeCompromise( )
  ]->
   [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AssetKey:
   [ Fr( ~assetKey ) ]
  -->
   [ !LtkAsset( $A, ~assetKey ), Out( pk(~assetKey) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevealAsset:
   [ !LtkAsset( $A, ~ltk ) ]
  --[ CompromisedAssetKey( $A, pk(~ltk) ), SomeCompromise( ) ]->
   [ Out( ~ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RootSetupDomains:
   [ !Ltk( $Party, ~rootKey ) ]
  --[
  OnlyOnce( <'root', $OI> ), IsRootPK( $Party, $OI, pk(~rootKey) ),
  OI( $Party, $OI )
  ]->
   [
   DomainRegister( $Party, $OI ),
   DomainRegister( $Party, <$OI, sha256(pk(~rootKey))> ),
   !RootDomains( $Party, ~rootKey, $OI, <$OI, sha256(pk(~rootKey))> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RootSetupCertificates:
   [
   !CA( $CA, skCA ), !RootDomains( $P, ~rootKey, oi, rootD ),
   !TLSKey( $P, $CA, oi, tlsSk ), !TLSKey( $P, $CA, rootD, tlsSk ),
   !MHTLeaf( $Log, <<'cert', $CA, oi, pk(tlsSk)>, sigOiCert> ),
   !MHTLeaf( $Log, <<'cert', $CA, rootD, pk(tlsSk)>, sigRootCert> )
   ]
  --[
  OnlyOnce( <'root_setup', oi> ),
  Eq( verify(sigOiCert, <'cert', $CA, oi, pk(tlsSk)>, pk(skCA)), true
  ),
  Eq( verify(sigRootCert, <'cert', $CA, rootD, pk(tlsSk)>, pk(skCA)),
      true
  )
  ]->
   [ !RootSetup( $P, ~rootKey, oi, rootD ) ]

  /*
  rule (modulo AC) RootSetupCertificates:
     [
     !CA( $CA, skCA ), !RootDomains( $P, ~rootKey, oi, rootD ),
     !TLSKey( $P, $CA, oi, tlsSk ), !TLSKey( $P, $CA, rootD, tlsSk ),
     !MHTLeaf( $Log, <<'cert', $CA, oi, pk(tlsSk)>, sigOiCert> ),
     !MHTLeaf( $Log, <<'cert', $CA, rootD, pk(tlsSk)>, sigRootCert> )
     ]
    --[ OnlyOnce( <'root_setup', oi> ), Eq( z, true ), Eq( z.1, true )
    ]->
     [ !RootSetup( $P, ~rootKey, oi, rootD ) ]
    variants (modulo AC)
    1. $CA   = $CA.25
       oi    = oi.29
       rootD = rootD.30
       sigOiCert
             = sigOiCert.31
       sigRootCert
             = sigRootCert.32
       skCA  = skCA.33
       tlsSk = tlsSk.34
       z     = verify(sigOiCert.31, <'cert', $CA.25, oi.29, pk(tlsSk.34)>,
                      pk(skCA.33))
       z.1   = verify(sigRootCert.32,
                      <'cert', $CA.25, rootD.30, pk(tlsSk.34)>, pk(skCA.33))

    2. $CA   = $CA.25
       oi    = oi.29
       rootD = rootD.30
       sigOiCert
             = sigOiCert.31
       sigRootCert
             = sign(<'cert', $CA.25, rootD.30, pk(tlsSk.34)>, skCA.33)
       skCA  = skCA.33
       tlsSk = tlsSk.34
       z     = verify(sigOiCert.31, <'cert', $CA.25, oi.29, pk(tlsSk.34)>,
                      pk(skCA.33))
       z.1   = true

    3. $CA   = $CA.25
       oi    = oi.29
       rootD = rootD.30
       sigOiCert
             = sign(<'cert', $CA.25, oi.29, pk(tlsSk.34)>, skCA.33)
       sigRootCert
             = sigRootCert.32
       skCA  = skCA.33
       tlsSk = tlsSk.34
       z     = true
       z.1   = verify(sigRootCert.32,
                      <'cert', $CA.25, rootD.30, pk(tlsSk.34)>, pk(skCA.33))

    4. $CA   = $CA.25
       oi    = oi.29
       rootD = rootD.30
       sigOiCert
             = sign(<'cert', $CA.25, oi.29, pk(tlsSk.34)>, skCA.33)
       sigRootCert
             = sign(<'cert', $CA.25, rootD.30, pk(tlsSk.34)>, skCA.33)
       skCA  = skCA.33
       tlsSk = tlsSk.34
       z     = true
       z.1   = true
  */

rule (modulo E) MonitorLogs:
   [
   !MHTLeaf( $Log, <<'cert', $SigningCA, d, pkTLS>, sig> ),
   !TLSKey( $P, $CA, d, skTLS )
   ]
  --[
  Neq( pk(skTLS), pkTLS ), Dispute( $P, $Log, $SigningCA, d, pkTLS )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Asset:
   [ !LtkAsset( $E, assetKey ), !RootSetup( $P, rootKey, oi, rootD ) ]
  --[ IsAsset( $P, $E, pk(assetKey) ), OnlyOnce( <'asset', $E> ) ]->
   [ !AssetOf( $P, $E, assetKey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) EndorseAsset:
   [
   !AssetOf( $P, $E, assetKey ),
   !RootDomains( $P, rootKey, oi, rootD )
   ]
  --[ OnlyOnce( <'end_int', $E> ) ]->
   [ Out( sign(<'end_int', oi, pk(assetKey)>, rootKey) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) EndorseParty:
   [
   !RootDomains( $Endorsed, rootKeyT, oiT, rootDT ),
   !RootDomains( $Endorser, rootKeyS, oiS, rootDS )
   ]
  -->
   [ Out( sign(<'end_ext', oiS, oiT, pk(rootKeyT)>, rootKeyS) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SendEmblem:
   [
   !AssetOf( $P, $E, assetKey ),
   !RootDomains( $P, rootKey, oi, rootD )
   ]
  -->
   [ Out( sign(<'emblem', $E, oi>, assetKey) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier_init:
   [ Fr( ~rid ) ] --> [ Setup_Verifier( ~rid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReceiveNoEmblem:
   [ Setup_Verifier( ~rid ) ]
  -->
   [ St_Verifier_0( ~rid ), Out( 'INVALID' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReceiveInvalidEmblem:
   [
   Setup_Verifier( ~rid ),
   In( <epk, <'emblem', tail>, emblemSignature> )
   ]
  --[ Neq( verify(emblemSignature, <'emblem', tail>, epk), true ) ]->
   [ St_Verifier_0( ~rid ), Out( 'INVALID' ) ]

  /*
  rule (modulo AC) ReceiveInvalidEmblem:
     [
     Setup_Verifier( ~rid ),
     In( <epk, <'emblem', tail>, emblemSignature> )
     ]
    --[ Neq( z, true ) ]->
     [ St_Verifier_0( ~rid ), Out( 'INVALID' ) ]
    variants (modulo AC)
    1. emblemSignature
             = emblemSignature.11
       epk   = epk.12
       tail  = tail.13
       z     = verify(emblemSignature.11, <'emblem', tail.13>, epk.12)

    2. emblemSignature
             = sign(<'emblem', tail.14>, x.23)
       epk   = pk(x.23)
       tail  = tail.14
       z     = true
  */

rule (modulo E) ReceiveMultipleEmblem:
   [
   Setup_Verifier( ~rid ),
   In( <epk0, <'emblem', $E0>, emblemSignature0> ),
   In( <epk1, <'emblem', $E1>, emblemSignature1> )
   ]
  --[
  Eq( verify(emblemSignature0, <'emblem', $E0>, epk0), true ),
  Eq( verify(emblemSignature1, <'emblem', $E1>, epk1), true )
  ]->
   [ St_Verifier_0( ~rid ), Out( 'INVALID' ) ]

  /*
  rule (modulo AC) ReceiveMultipleEmblem:
     [
     Setup_Verifier( ~rid ),
     In( <epk0, <'emblem', $E0>, emblemSignature0> ),
     In( <epk1, <'emblem', $E1>, emblemSignature1> )
     ]
    --[ Eq( z, true ), Eq( z.1, true ) ]->
     [ St_Verifier_0( ~rid ), Out( 'INVALID' ) ]
    variants (modulo AC)
    1. $E0   = $E0.19
       $E1   = $E1.20
       emblemSignature0
             = emblemSignature0.22
       emblemSignature1
             = emblemSignature1.23
       epk0  = epk0.24
       epk1  = epk1.25
       z     = verify(emblemSignature0.22, <'emblem', $E0.19>, epk0.24)
       z.1   = verify(emblemSignature1.23, <'emblem', $E1.20>, epk1.25)

    2. $E0   = $E0.27
       $E1   = $E1.28
       emblemSignature0
             = emblemSignature0.30
       emblemSignature1
             = sign(<'emblem', $E1.28>, x.52)
       epk0  = epk0.32
       epk1  = pk(x.52)
       z     = verify(emblemSignature0.30, <'emblem', $E0.27>, epk0.32)
       z.1   = true

    3. $E0   = $E0.27
       $E1   = $E1.28
       emblemSignature0
             = sign(<'emblem', $E0.27>, x.52)
       emblemSignature1
             = emblemSignature1.31
       epk0  = pk(x.52)
       epk1  = epk1.33
       z     = true
       z.1   = verify(emblemSignature1.31, <'emblem', $E1.28>, epk1.33)

    4. $E0   = $E0.28
       $E1   = $E1.29
       emblemSignature0
             = sign(<'emblem', $E0.28>, x.53)
       emblemSignature1
             = sign(<'emblem', $E1.29>, x.54)
       epk0  = pk(x.53)
       epk1  = pk(x.54)
       z     = true
       z.1   = true
  */

rule (modulo E) ReceiveUnsignedEmblem:
   [ Setup_Verifier( ~rid ), In( <'emblem', $E> ) ]
  -->
   [ St_Verifier_0( ~rid ), Out( <'UNSIGNED', $E> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReceiveSignedEmblem:
   [
   Setup_Verifier( ~rid ),
   In( <epk, <'emblem', $E>, emblemSignature> )
   ]
  --[ Eq( verify(emblemSignature, <'emblem', $E>, epk), true ) ]->
   [ St_Verifier_0( ~rid ), Out( <'SIGNED', $E> ) ]

  /*
  rule (modulo AC) ReceiveSignedEmblem:
     [
     Setup_Verifier( ~rid ),
     In( <epk, <'emblem', $E>, emblemSignature> )
     ]
    --[ Eq( z, true ) ]->
     [ St_Verifier_0( ~rid ), Out( <'SIGNED', $E> ) ]
    variants (modulo AC)
    1. $E    = $E.12
       emblemSignature
             = emblemSignature.14
       epk   = epk.15
       z     = verify(emblemSignature.14, <'emblem', $E.12>, epk.15)

    2. $E    = $E.18
       emblemSignature
             = sign(<'emblem', $E.18>, x.34)
       epk   = pk(x.34)
       z     = true
  */

rule (modulo E) ReceiveOrganizationalEmblem:
   [
   Setup_Verifier( ~rid ), !CA( $CA, skCA ), !Log( $Log, skCT ),
   In( <epk, <'emblem', $E, oi>, emblemSignature> ),
   In( <rootKey, <'end_int', oi, epk>, endSignature> )
   ]
  -->
   [
   St_Verifier_1( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                  <rootKey, <'end_int', oi, epk>, endSignature>
   ),
   Out( <'MHTLeafReq', $Log, oi> ),
   Out( <'MHTLeafReq', $Log, oi, sha256(rootKey)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OrgRootKeyLearn:
   [
   St_Verifier_1( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                  <rootKey, <'end_int', oi, epk>, endSignature>
   ),
   !CA( $CA, skCA ), !Log( $Log, skCT ),
   In( <<'MHTLeaf', $Log, <'cert', $CA, oi, tlsPk>, certOiSig>,
        ctSigOi>
   ),
   In( <
        <'MHTLeaf', $Log, <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>,
         certRootDSig>,
        ctSigRootD>
   )
   ]
  --[
  Eq( verify(ctSigOi,
             <'MHTLeaf', $Log, <'cert', $CA, oi, tlsPk>, certOiSig>, pk(skCT)),
      true
  ),
  Eq( verify(ctSigRootD,
             <'MHTLeaf', $Log, <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>,
              certRootDSig>,
             pk(skCT)),
      true
  ),
  Eq( verify(certOiSig, <'cert', $CA, oi, tlsPk>, pk(skCA)), true ),
  Eq( verify(certRootDSig,
             <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>, pk(skCA)),
      true
  ),
  VerifiedRootKey( oi, sha256(rootKey) ),
  RootCertVerified( <<'cert', $CA, <oi, sha256(rootKey)>, tlsPk>,
                     certRootDSig>
  ),
  LogInclusionVerified( $Log, <'cert', $CA, oi, tlsPk> ),
  LogInclusionVerified( $Log,
                        <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>
  )
  ]->
   [
   St_Verifier_2( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                  <rootKey, <'end_int', oi, epk>, endSignature>
   )
   ]

  /*
  rule (modulo AC) OrgRootKeyLearn:
     [
     St_Verifier_1( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                    <rootKey, <'end_int', oi, epk>, endSignature>
     ),
     !CA( $CA, skCA ), !Log( $Log, skCT ),
     In( <<'MHTLeaf', $Log, <'cert', $CA, oi, tlsPk>, certOiSig>,
          ctSigOi>
     ),
     In( <
          <'MHTLeaf', $Log, <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>,
           certRootDSig>,
          ctSigRootD>
     )
     ]
    --[
    Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ), Eq( z.3, true ),
    VerifiedRootKey( oi, sha256(rootKey) ),
    RootCertVerified( <<'cert', $CA, <oi, sha256(rootKey)>, tlsPk>,
                       certRootDSig>
    ),
    LogInclusionVerified( $Log, <'cert', $CA, oi, tlsPk> ),
    LogInclusionVerified( $Log,
                          <'cert', $CA, <oi, sha256(rootKey)>, tlsPk>
    )
    ]->
     [
     St_Verifier_2( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                    <rootKey, <'end_int', oi, epk>, endSignature>
     )
     ]
    variants (modulo AC)
     1. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        certOiSig.45>,
                       pk(skCT.55))
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        certRootDSig.46>,
                       pk(skCT.55))
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

     2. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      certRootDSig.46>,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        certOiSig.45>,
                       pk(skCT.55))
        z.1   = true
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

     3. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      certOiSig.45>,
                     skCT.55)
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        certRootDSig.46>,
                       pk(skCT.55))
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

     4. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      certOiSig.45>,
                     skCT.55)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      certRootDSig.46>,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = true
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

     5. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        certOiSig.45>,
                       pk(skCT.55))
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                             skCA.54)
                       >,
                       pk(skCT.55))
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = true

     6. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                           skCA.54)
                     >,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        certOiSig.45>,
                       pk(skCT.55))
        z.1   = true
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = true

     7. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      certOiSig.45>,
                     skCT.55)
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                             skCA.54)
                       >,
                       pk(skCT.55))
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = true

     8. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = certOiSig.45
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      certOiSig.45>,
                     skCT.55)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                           skCA.54)
                     >,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = true
        z.2   = verify(certOiSig.45, <'cert', $CA.41, oi.52, tlsPk.56>,
                       pk(skCA.54))
        z.3   = true

     9. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                       pk(skCT.55))
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        certRootDSig.46>,
                       pk(skCT.55))
        z.2   = true
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

    10. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      certRootDSig.46>,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                       pk(skCT.55))
        z.1   = true
        z.2   = true
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

    11. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                     skCT.55)
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        certRootDSig.46>,
                       pk(skCT.55))
        z.2   = true
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

    12. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = certRootDSig.46
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                     skCT.55)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      certRootDSig.46>,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = true
        z.2   = true
        z.3   = verify(certRootDSig.46,
                       <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                       pk(skCA.54))

    13. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                       pk(skCT.55))
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                             skCA.54)
                       >,
                       pk(skCT.55))
        z.2   = true
        z.3   = true

    14. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = ctSigOi.47
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                           skCA.54)
                     >,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = verify(ctSigOi.47,
                       <'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                        sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                       pk(skCT.55))
        z.1   = true
        z.2   = true
        z.3   = true

    15. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                     skCT.55)
        ctSigRootD
              = ctSigRootD.48
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = verify(ctSigRootD.48,
                       <'MHTLeaf', $Log.43,
                        <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                        sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                             skCA.54)
                       >,
                       pk(skCT.55))
        z.2   = true
        z.3   = true

    16. $CA   = $CA.41
        $Log  = $Log.43
        certOiSig
              = sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)
        certRootDSig
              = sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                     skCA.54)
        ctSigOi
              = sign(<'MHTLeaf', $Log.43, <'cert', $CA.41, oi.52, tlsPk.56>,
                      sign(<'cert', $CA.41, oi.52, tlsPk.56>, skCA.54)>,
                     skCT.55)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.43,
                      <'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                      sign(<'cert', $CA.41, <oi.52, sha256(rootKey.53)>, tlsPk.56>,
                           skCA.54)
                     >,
                     skCT.55)
        oi    = oi.52
        rootKey
              = rootKey.53
        skCA  = skCA.54
        skCT  = skCT.55
        tlsPk = tlsPk.56
        z     = true
        z.1   = true
        z.2   = true
        z.3   = true
  */

rule (modulo E) VerifyOrganizationalEmblem:
   [
   St_Verifier_2( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                  <rootKey, <'end_int', oi, epk>, signature>
   )
   ]
  --[
  VerifiedEndorsed( ~rid, oi, $E, epk ),
  VerifiedRootEndorsement( ~rid, oi, rootKey ),
  UsedRootKey( oi, rootKey ),
  Eq( verify(emblemSignature, <'emblem', $E, oi>, epk), true ),
  Eq( verify(signature, <'end_int', oi, epk>, rootKey), true )
  ]->
   [
   St_Verifier_3( ~rid, oi, rootKey, $E ), Out( <'SIGNED', $E> ),
   Out( <'ORGANIZATIONAL', oi, $E> )
   ]

  /*
  rule (modulo AC) VerifyOrganizationalEmblem:
     [
     St_Verifier_2( ~rid, <epk, <'emblem', $E, oi>, emblemSignature>,
                    <rootKey, <'end_int', oi, epk>, signature>
     )
     ]
    --[
    VerifiedEndorsed( ~rid, oi, $E, epk ),
    VerifiedRootEndorsement( ~rid, oi, rootKey ),
    UsedRootKey( oi, rootKey ), Eq( z, true ), Eq( z.1, true )
    ]->
     [
     St_Verifier_3( ~rid, oi, rootKey, $E ), Out( <'SIGNED', $E> ),
     Out( <'ORGANIZATIONAL', oi, $E> )
     ]
    variants (modulo AC)
    1. $E    = $E.21
       emblemSignature
             = emblemSignature.23
       epk   = epk.24
       oi    = oi.25
       rootKey
             = rootKey.26
       signature
             = signature.27
       z     = verify(emblemSignature.23, <'emblem', $E.21, oi.25>,
                      epk.24)
       z.1   = verify(signature.27, <'end_int', oi.25, epk.24>,
                      rootKey.26)

    2. $E    = $E.56
       emblemSignature
             = emblemSignature.58
       epk   = epk.59
       oi    = oi.60
       rootKey
             = pk(x.110)
       signature
             = sign(<'end_int', oi.60, epk.59>, x.110)
       z     = verify(emblemSignature.58, <'emblem', $E.56, oi.60>,
                      epk.59)
       z.1   = true

    3. $E    = $E.57
       emblemSignature
             = sign(<'emblem', $E.57, oi.61>, x.112)
       epk   = pk(x.112)
       oi    = oi.61
       rootKey
             = rootKey.62
       signature
             = signature.63
       z     = true
       z.1   = verify(signature.63, <'end_int', oi.61, pk(x.112)>,
                      rootKey.62)

    4. $E    = $E.58
       emblemSignature
             = sign(<'emblem', $E.58, oi.62>, x.113)
       epk   = pk(x.113)
       oi    = oi.62
       rootKey
             = pk(x.114)
       signature
             = sign(<'end_int', oi.62, pk(x.113)>, x.114)
       z     = true
       z.1   = true
  */

rule (modulo E) VerifyAuthorityEndorsementsTerminate:
   [ St_Verifier_3( ~rid, oi, rootKey, $E ) ]
  -->
   [ St_Verifier_0( ~rid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReceiveAuthorityEndorsement:
   [
   St_Verifier_3( ~rid, oi, rootKey, $E ), !CA( $CA, skCA ),
   !Log( $Log, skCT ),
   In( <authPk, <'end_ext', auth, oi, rootKey>, endSignature> )
   ]
  -->
   [
   St_Verifier_4( ~rid, oi, rootKey, $E,
                  <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
   ),
   Out( <'MHTLeafReq', $Log, auth> ),
   Out( <'MHTLeafReq', $Log, auth, sha256(authPk)> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AuthRootKeyLearn:
   [
   St_Verifier_4( ~rid, oi, rootKey, $E,
                  <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
   ),
   !CA( $CA, skCA ), !Log( $Log, skCT ),
   In( <<'MHTLeaf', $Log, <'cert', $CA, auth, tlsPk>, certOiSig>,
        ctSigOi>
   ),
   In( <
        <'MHTLeaf', $Log, <'cert', $CA, <auth, sha256(authPk)>, tlsPk>,
         certRootDSig>,
        ctSigRootD>
   )
   ]
  --[
  Eq( verify(ctSigOi,
             <'MHTLeaf', $Log, <'cert', $CA, auth, tlsPk>, certOiSig>,
             pk(skCT)),
      true
  ),
  Eq( verify(ctSigRootD,
             <'MHTLeaf', $Log, <'cert', $CA, <auth, sha256(authPk)>, tlsPk>,
              certRootDSig>,
             pk(skCT)),
      true
  ),
  Eq( verify(certOiSig, <'cert', $CA, auth, tlsPk>, pk(skCA)), true
  ),
  Eq( verify(certRootDSig,
             <'cert', $CA, <auth, sha256(authPk)>, tlsPk>, pk(skCA)),
      true
  ),
  VerifiedRootKey( auth, sha256(authPk) ),
  RootCertVerified( <<'cert', $CA, <auth, sha256(authPk)>, tlsPk>,
                     certRootDSig>
  ),
  LogInclusionVerified( $Log, <'cert', $CA, auth, tlsPk> ),
  LogInclusionVerified( $Log,
                        <'cert', $CA, <auth, sha256(authPk)>, tlsPk>
  )
  ]->
   [
   St_Verifier_5( ~rid, oi, rootKey, $E,
                  <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
   )
   ]

  /*
  rule (modulo AC) AuthRootKeyLearn:
     [
     St_Verifier_4( ~rid, oi, rootKey, $E,
                    <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
     ),
     !CA( $CA, skCA ), !Log( $Log, skCT ),
     In( <<'MHTLeaf', $Log, <'cert', $CA, auth, tlsPk>, certOiSig>,
          ctSigOi>
     ),
     In( <
          <'MHTLeaf', $Log, <'cert', $CA, <auth, sha256(authPk)>, tlsPk>,
           certRootDSig>,
          ctSigRootD>
     )
     ]
    --[
    Eq( z, true ), Eq( z.1, true ), Eq( z.2, true ), Eq( z.3, true ),
    VerifiedRootKey( auth, sha256(authPk) ),
    RootCertVerified( <<'cert', $CA, <auth, sha256(authPk)>, tlsPk>,
                       certRootDSig>
    ),
    LogInclusionVerified( $Log, <'cert', $CA, auth, tlsPk> ),
    LogInclusionVerified( $Log,
                          <'cert', $CA, <auth, sha256(authPk)>, tlsPk>
    )
    ]->
     [
     St_Verifier_5( ~rid, oi, rootKey, $E,
                    <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
     )
     ]
    variants (modulo AC)
     1. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        certOiSig.46>,
                       pk(skCT.54))
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        certRootDSig.47>,
                       pk(skCT.54))
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

     2. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      certRootDSig.47>,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        certOiSig.46>,
                       pk(skCT.54))
        z.1   = true
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

     3. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      certOiSig.46>,
                     skCT.54)
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        certRootDSig.47>,
                       pk(skCT.54))
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

     4. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      certOiSig.46>,
                     skCT.54)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      certRootDSig.47>,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = true
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

     5. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        certOiSig.46>,
                       pk(skCT.54))
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                             skCA.53)
                       >,
                       pk(skCT.54))
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = true

     6. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                           skCA.53)
                     >,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        certOiSig.46>,
                       pk(skCT.54))
        z.1   = true
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = true

     7. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      certOiSig.46>,
                     skCT.54)
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                             skCA.53)
                       >,
                       pk(skCT.54))
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = true

     8. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = certOiSig.46
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      certOiSig.46>,
                     skCT.54)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                           skCA.53)
                     >,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = true
        z.2   = verify(certOiSig.46, <'cert', $CA.40, auth.44, tlsPk.55>,
                       pk(skCA.53))
        z.3   = true

     9. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                       pk(skCT.54))
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        certRootDSig.47>,
                       pk(skCT.54))
        z.2   = true
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

    10. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      certRootDSig.47>,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                       pk(skCT.54))
        z.1   = true
        z.2   = true
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

    11. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                     skCT.54)
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        certRootDSig.47>,
                       pk(skCT.54))
        z.2   = true
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

    12. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = certRootDSig.47
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                     skCT.54)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      certRootDSig.47>,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = true
        z.2   = true
        z.3   = verify(certRootDSig.47,
                       <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                       pk(skCA.53))

    13. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                       pk(skCT.54))
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                             skCA.53)
                       >,
                       pk(skCT.54))
        z.2   = true
        z.3   = true

    14. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = ctSigOi.48
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                           skCA.53)
                     >,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = verify(ctSigOi.48,
                       <'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                        sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                       pk(skCT.54))
        z.1   = true
        z.2   = true
        z.3   = true

    15. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                     skCT.54)
        ctSigRootD
              = ctSigRootD.49
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = verify(ctSigRootD.49,
                       <'MHTLeaf', $Log.42,
                        <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                        sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                             skCA.53)
                       >,
                       pk(skCT.54))
        z.2   = true
        z.3   = true

    16. $CA   = $CA.40
        $Log  = $Log.42
        auth  = auth.44
        authPk
              = authPk.45
        certOiSig
              = sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)
        certRootDSig
              = sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                     skCA.53)
        ctSigOi
              = sign(<'MHTLeaf', $Log.42, <'cert', $CA.40, auth.44, tlsPk.55>,
                      sign(<'cert', $CA.40, auth.44, tlsPk.55>, skCA.53)>,
                     skCT.54)
        ctSigRootD
              = sign(<'MHTLeaf', $Log.42,
                      <'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                      sign(<'cert', $CA.40, <auth.44, sha256(authPk.45)>, tlsPk.55>,
                           skCA.53)
                     >,
                     skCT.54)
        skCA  = skCA.53
        skCT  = skCT.54
        tlsPk = tlsPk.55
        z     = true
        z.1   = true
        z.2   = true
        z.3   = true
  */

rule (modulo E) VerifyAuthorityEndorsement:
   [
   St_Verifier_5( ~rid, oi, rootKey, $E,
                  <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
   )
   ]
  --[
  Neq( auth, oi ),
  Eq( verify(endSignature, <'end_ext', auth, oi, rootKey>, authPk),
      true
  ),
  VerifiedAuthorityEndorsement( ~rid, auth, authPk, oi, rootKey ),
  UsedRootKey( auth, authPk )
  ]->
   [ St_Verifier_3( ~rid, oi, rootKey, $E ), Out( <'ENDORSED', auth> )
   ]

  /*
  rule (modulo AC) VerifyAuthorityEndorsement:
     [
     St_Verifier_5( ~rid, oi, rootKey, $E,
                    <authPk, <'end_ext', auth, oi, rootKey>, endSignature>
     )
     ]
    --[
    Neq( auth, oi ), Eq( z, true ),
    VerifiedAuthorityEndorsement( ~rid, auth, authPk, oi, rootKey ),
    UsedRootKey( auth, authPk )
    ]->
     [ St_Verifier_3( ~rid, oi, rootKey, $E ), Out( <'ENDORSED', auth> )
     ]
    variants (modulo AC)
    1. auth  = auth.16
       authPk
             = authPk.17
       endSignature
             = endSignature.18
       oi    = oi.19
       rootKey
             = rootKey.20
       z     = verify(endSignature.18,
                      <'end_ext', auth.16, oi.19, rootKey.20>, authPk.17)

    2. auth  = auth.21
       authPk
             = pk(x.38)
       endSignature
             = sign(<'end_ext', auth.21, oi.24, rootKey.25>, x.38)
       oi    = oi.24
       rootKey
             = rootKey.25
       z     = true
  */

lemma TLSKeyShareRecursion [use_induction, reuse]:
  all-traces
  "∀ k #t1. (TLSKeyShare( k ) @ #t1) ⇒ (∃ #t2. TLSKeyGen( k ) @ #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ k #t1.
  (TLSKeyShare( k ) @ #t1) ∧ ∀ #t2. (TLSKeyGen( k ) @ #t2) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#t1))  ∥
         (∃ #t2. (TLSKeyGen( ~skUser ) @ #t2) ∧ ¬(last(#t2))) )
    case case_1
    solve( splitEqs(0) )
      case split_case_1
      solve( !TLSKey( $A, $CA, d1, ~skUser ) ▶₀ #t1 )
        case TLSKeyRegister_case_1
        by contradiction /* from formulas */
      next
        case TLSKeyRegister_case_2
        by contradiction /* from formulas */
      next
        case TLSKeyRegister_case_3
        by contradiction /* from formulas */
      next
        case TLSKeyRegister_case_4
        by contradiction /* from formulas */
      next
        case TLSKeyShare_case_1
        by contradiction /* from formulas */
      next
        case TLSKeyShare_case_2
        by contradiction /* from formulas */
      next
        case TLSKeyShare_case_3
        by contradiction /* from formulas */
      next
        case TLSKeyShare_case_4
        by contradiction /* from formulas */
      qed
    next
      case split_case_2
      solve( !TLSKey( $A, $CA, fst(d2), ~skUser ) ▶₀ #t1 )
        case TLSKeyRegister
        by contradiction /* from formulas */
      next
        case TLSKeyShare
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma TLSKeyLeakRecursion [use_induction, reuse]:
  all-traces
  "∀ k #t.
    (CompromisedTLSKey( k ) @ #t) ⇒ (∃ #x. TLSKeyGen( k ) @ #x)"
/*
guarded formula characterizing all counter-examples:
"∃ k #t.
  (CompromisedTLSKey( k ) @ #t) ∧ ∀ #x. (TLSKeyGen( k ) @ #x) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#t))  ∥
         (∃ #x. (TLSKeyGen( ~skUser ) @ #x) ∧ ¬(last(#x))) )
    case case_1
    solve( !TLSKey( $A, $CA, d, ~skUser ) ▶₀ #t )
      case TLSKeyRegister_case_1
      by contradiction /* from formulas */
    next
      case TLSKeyRegister_case_2
      by contradiction /* from formulas */
    next
      case TLSKeyRegister_case_3
      by contradiction /* from formulas */
    next
      case TLSKeyRegister_case_4
      by contradiction /* from formulas */
    next
      case TLSKeyShare_case_1
      by contradiction /* from formulas */
    next
      case TLSKeyShare_case_2
      by contradiction /* from formulas */
    next
      case TLSKeyShare_case_3
      by contradiction /* from formulas */
    next
      case TLSKeyShare_case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma WrongCAKeyUseImpliesCompromise [reuse]:
  all-traces
  "∀ tag m ca caSk #t1 #t2.
    (((CASk( ca, caSk ) @ #t1) ∧
      (!KU( <<tag, m>, sign(<'tag', m>, caSk)> ) @ #t2)) ∧
     (¬(tag = 'cert'))) ⇒
    (∃ #x. (CompromisedCA( ca ) @ #x) ∧ (CompromisedParty( ca ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ tag m ca caSk #t1 #t2.
  (CASk( ca, caSk ) @ #t1) ∧
  (!KU( <<tag, m>, sign(<'tag', m>, caSk)> ) @ #t2)
 ∧
  (¬(tag = 'cert')) ∧
  (∀ #x.
    (CompromisedCA( ca ) @ #x) ∧ (CompromisedParty( ca ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !KU( sign(<'tag', m>, ~skCA) ) @ #vk.3 )
  case FraudulentCertificate
  by contradiction /* from formulas */
next
  case c_sign
  by solve( !KU( ~skCA ) @ #vk.5 )
qed

lemma CanObtainRootKey:
  exists-trace
  "(∃ oi rootKeyHash #t. VerifiedRootKey( oi, rootKeyHash ) @ #t) ∧
   (¬(∃ #x. SomeCompromise( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"(∃ oi rootKeyHash #t. (VerifiedRootKey( oi, rootKeyHash ) @ #t)) ∧
 (∀ #x. (SomeCompromise( ) @ #x) ⇒ ⊥)"
*/
simplify
solve( VerifiedRootKey( oi, rootKeyHash ) @ #t )
  case AuthRootKeyLearn
  solve( !CA( $CA, skCA ) ▶₁ #t )
    case CA
    solve( !Log( $Log, skCT ) ▶₂ #t )
      case LogRegister
      solve( St_Verifier_4( ~rid, oi, rootKey, $E,
                            <authPk, <'end_ext', oi.1, oi, rootKey>, endSignature>
             ) ▶₀ #t )
        case ReceiveAuthorityEndorsement
        solve( !KU( sign(<'cert', $CA, oi.1, tlsPk>, ~skCA) ) @ #vk.22 )
          case CertificateRequest_case_1
          by contradiction /* from formulas */
        next
          case CertificateRequest_case_2
          solve( !KU( sign(<'MHTLeaf', $Log, <'cert', $CA, $OI, pk(~skTLS)>,
                            sign(<'cert', $CA, $OI, pk(~skTLS)>, ~skCA)>,
                           ~skCT)
                 ) @ #vk.24 )
            case MHTLeafReq_case_1
            solve( !KU( sign(<'cert', $CA, <$OI, sha256(authPk)>, pk(~skTLS)>,
                             ~skCA)
                   ) @ #vk.28 )
              case CertificateRequest_case_1
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_2
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_3
              solve( !KU( sign(<'MHTLeaf', $Log,
                                <'cert', $CA, <$OI, sha256(pk(~rootKey.1))>, pk(~skTLS)>,
                                sign(<'cert', $CA, <$OI, sha256(pk(~rootKey.1))>, pk(~skTLS)>,
                                     ~skCA)
                               >,
                               ~skCT)
                     ) @ #vk.31 )
                case MHTLeafReq_case_1
                solve( !TLSKey( $A, $CA, $OI, ~skTLS ) ▶₀ #vr.15 )
                  case TLSKeyRegister
                  solve( !DomainOwner( $A, $OI ) ▶₁ #vr.14 )
                    case DomainRegister
                    solve( !KU( sha256(pk(~rootKey.1)) ) @ #vk.33 )
                      case ReceiveAuthorityEndorsement
                      by sorry /* removed */
                    next
                      case ReceiveOrganizationalEmblem
                      solve( St_Verifier_3( ~rid, oi, rootKey, $E ) ▶₀ #vr.2 )
                        case VerifyAuthorityEndorsement
                        by sorry
                      next
                        case VerifyOrganizationalEmblem
                        solve( !KU( sign(<'cert', $CA.3, oi, tlsPk>, ~skCA.3) ) @ #vk.79 )
                          case CertificateRequest_case_1
                          by contradiction /* from formulas */
                        next
                          case CertificateRequest_case_2
                          solve( !KU( sign(<'MHTLeaf', $Log.3,
                                            <'cert', $CA.3, $OI, pk(~skTLS.1)>,
                                            sign(<'cert', $CA.3, $OI, pk(~skTLS.1)>, ~skCA.3)>,
                                           ~skCT.5)
                                 ) @ #vk.82 )
                            case MHTLeafReq_case_1
                            solve( !KU( sign(<'cert', $CA.2, <$OI, sha256(pk(x))>, pk(~skTLS.1)
                                             >,
                                             ~skCA.2)
                                   ) @ #vk.87 )
                              case CertificateRequest_case_1
                              by contradiction /* from formulas */
                            next
                              case CertificateRequest_case_2
                              by contradiction /* from formulas */
                            next
                              case CertificateRequest_case_3
                              solve( !TLSKey( $A.1, $CA.2, $OI, ~skTLS.1 ) ▶₀ #vr.44 )
                                case TLSKeyRegister
                                solve( !DomainOwner( $A.1, $OI ) ▶₁ #vr.43 )
                                  case DomainRegister
                                  solve( !KU( sign(<'MHTLeaf', $Log.3,
                                                    <'cert', $CA.2, <$OI, sha256(pk(~rootKey))>,
                                                     pk(~skTLS.1)>,
                                                    sign(<'cert', $CA.2,
                                                          <$OI, sha256(pk(~rootKey))>, pk(~skTLS.1)
                                                         >,
                                                         ~skCA.2)
                                                   >,
                                                   ~skCT.2)
                                         ) @ #vk.88 )
                                    case MHTLeafReq_case_1
                                    solve( !KU( sign(<'emblem', $E, $OI>, x) ) @ #vk.93 )
                                      case FraudulentCertificate
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_01
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_02
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_03
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_04
                                      solve( !TLSKey( $A.1, $CA.5, $OI.2, ~skUser ) ▶₀ #vr.55 )
                                        case TLSKeyRegister
                                        solve( !DomainOwner( $A.1, $OI.2 ) ▶₁ #vr.60 )
                                          case DomainRegister
                                          solve( !KU( sign(<'end_int', $OI, pk(~assetKey)>,
                                                           ~rootKey)
                                                 ) @ #vk.98 )
                                            case EndorseAsset
                                            solve( !KU( sign(<'cert', $CA.5, $OI.2, pk(~skUser)>,
                                                             ~skCA.5)
                                                   ) @ #vk.107 )
                                              case CertificateRequest
                                              solve( !KU( sign(<'cert', $CA.5,
                                                                <$OI.2, sha256(pk(~rootKey.2))>,
                                                                pk(~skUser)>,
                                                               ~skCA.5)
                                                     ) @ #vk.108 )
                                                case CertificateRequest
                                                solve( !KU( pk(~skTLS) ) @ #vk.59 )
                                                  case TLSKeyRegister
                                                  solve( !KU( pk(~rootKey.1) ) @ #vk.60 )
                                                    case Ltk
                                                    solve( !KU( sha256(pk(~rootKey)) ) @ #vk.98 )
                                                      case ReceiveAuthorityEndorsement
                                                      by sorry
                                                    next
                                                      case ReceiveOrganizationalEmblem
                                                      solve( !KU( pk(~assetKey) ) @ #vk.102 )
                                                        case AssetKey
                                                        solve( !KU( pk(~rootKey) ) @ #vk.80 )
                                                          case Ltk
                                                          solve( !KU( pk(~skTLS.1) ) @ #vk.105 )
                                                            case TLSKeyRegister
                                                            solve( !KU( pk(~skUser) ) @ #vk.114 )
                                                              case TLSKeyRegister
                                                              solve( !KU( sha256(pk(~rootKey.2))
                                                                     ) @ #vk.115 )
                                                                case ReceiveAuthorityEndorsement
                                                                by sorry
                                                              next
                                                                case ReceiveOrganizationalEmblem
                                                                solve( !KU( pk(~rootKey.2)
                                                                       ) @ #vk.134 )
                                                                  case Ltk
                                                                  SOLVED // trace found
                                                                next
                                                                  case c_pk
                                                                  by sorry
                                                                qed
                                                              next
                                                                case c_sha256
                                                                by sorry
                                                              qed
                                                            next
                                                              case c_pk
                                                              by sorry
                                                            qed
                                                          next
                                                            case c_pk
                                                            by sorry
                                                          qed
                                                        next
                                                          case c_pk
                                                          by sorry
                                                        qed
                                                      next
                                                        case c_pk
                                                        by sorry
                                                      qed
                                                    next
                                                      case c_sha256
                                                      by sorry
                                                    qed
                                                  next
                                                    case c_pk
                                                    by sorry
                                                  qed
                                                next
                                                  case c_pk
                                                  by sorry
                                                qed
                                              next
                                                case FraudulentCertificate
                                                by contradiction /* from formulas */
                                              next
                                                case c_sign
                                                by sorry
                                              qed
                                            next
                                              case FraudulentCertificate
                                              by contradiction /* from formulas */
                                            next
                                              case c_sign
                                              by sorry
                                            qed
                                          next
                                            case c_sign
                                            by sorry
                                          qed
                                        qed
                                      qed
                                    next
                                      case SendEmblem_case_05
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_06
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_07
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_08
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_09
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_10
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_11
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_12
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_13
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_14
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_15
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_16
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_17
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_18
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_19
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_20
                                      by sorry
                                    next
                                      case SendEmblem_case_21
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_22
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_23
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_24
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_25
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_26
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_27
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_28
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_29
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_30
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_31
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_32
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_33
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_34
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_35
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_36
                                      by sorry
                                    next
                                      case SendEmblem_case_37
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_38
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_39
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_40
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_41
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_42
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_43
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_44
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_45
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_46
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_47
                                      by contradiction /* from formulas */
                                    next
                                      case SendEmblem_case_48
                                      by contradiction /* from formulas */
                                    next
                                      case c_sign
                                      by sorry
                                    qed
                                  next
                                    case MHTLeafReq_case_2
                                    by contradiction /* from formulas */
                                  next
                                    case c_sign
                                    by sorry
                                  qed
                                qed
                              qed
                            next
                              case FraudulentCertificate
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              by sorry
                            qed
                          next
                            case MHTLeafReq_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by sorry
                          qed
                        next
                          case CertificateRequest_case_3
                          by contradiction /* from formulas */
                        next
                          case CertificateRequest_case_4
                          by sorry
                        next
                          case CertificateRequest_case_5
                          by contradiction /* from formulas */
                        next
                          case CertificateRequest_case_6
                          by sorry
                        next
                          case CertificateRequest_case_7
                          by contradiction /* from formulas */
                        next
                          case CertificateRequest_case_8
                          by sorry
                        next
                          case FraudulentCertificate
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by sorry
                        qed
                      qed
                    next
                      case c_sha256
                      by sorry
                    qed
                  qed
                qed
              next
                case MHTLeafReq_case_2
                by contradiction /* from formulas */
              next
                case c_sign
                by sorry
              qed
            next
              case FraudulentCertificate
              by contradiction /* from formulas */
            next
              case c_sign
              by sorry
            qed
          next
            case MHTLeafReq_case_2
            by contradiction /* from formulas */
          next
            case c_sign
            by sorry
          qed
        next
          case CertificateRequest_case_3
          by contradiction /* from formulas */
        next
          case CertificateRequest_case_4
          by sorry
        next
          case CertificateRequest_case_5
          by contradiction /* from formulas */
        next
          case CertificateRequest_case_6
          by sorry
        next
          case CertificateRequest_case_7
          by contradiction /* from formulas */
        next
          case CertificateRequest_case_8
          by sorry
        next
          case FraudulentCertificate
          by contradiction /* from formulas */
        next
          case c_sign
          by sorry
        qed
      qed
    qed
  qed
next
  case OrgRootKeyLearn
  by sorry
qed

lemma CanReceiveEmblem:
  exists-trace
  "(∃ id oi asset assetKey rootKey authOi1 authOi2 authPk1 authPk2 p1
      p2 #a #b #c #d #e #f.
     ((((((VerifiedEndorsed( id, oi, asset, assetKey ) @ #a) ∧
          (VerifiedRootEndorsement( id, oi, rootKey ) @ #b)) ∧
         (VerifiedAuthorityEndorsement( id, authOi1, authPk1, oi, rootKey
          ) @ #c)) ∧
        (VerifiedAuthorityEndorsement( id, authOi2, authPk2, oi, rootKey
         ) @ #d)) ∧
       (IsRootPK( p1, authOi1, authPk1 ) @ #e)) ∧
      (IsRootPK( p2, authOi2, authPk2 ) @ #f)) ∧
     (¬(authOi1 = authOi2))) ∧
   (¬(∃ #x. SomeCompromise( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"(∃ id oi asset assetKey rootKey authOi1 authOi2 authPk1 authPk2 p1
    p2 #a #b #c #d #e #f.
   (VerifiedEndorsed( id, oi, asset, assetKey ) @ #a) ∧
   (VerifiedRootEndorsement( id, oi, rootKey ) @ #b) ∧
   (VerifiedAuthorityEndorsement( id, authOi1, authPk1, oi, rootKey
    ) @ #c) ∧
   (VerifiedAuthorityEndorsement( id, authOi2, authPk2, oi, rootKey
    ) @ #d) ∧
   (IsRootPK( p1, authOi1, authPk1 ) @ #e) ∧
   (IsRootPK( p2, authOi2, authPk2 ) @ #f)
  ∧
   ¬(authOi1 = authOi2)) ∧
 (∀ #x. (SomeCompromise( ) @ #x) ⇒ ⊥)"
*/
simplify
solve( St_Verifier_2( ~rid,
                      <pk(x), <'emblem', $E, oi>, sign(<'emblem', $E, oi>, x)>,
                      <pk(x.1), <'end_int', oi, pk(x)>, sign(<'end_int', oi, pk(x)>, x.1)
                      >
       ) ▶₀ #a )
  case OrgRootKeyLearn
  solve( St_Verifier_2( ~rid,
                        <pk(x.2), <'emblem', $E.1, oi>, sign(<'emblem', $E.1, oi>, x.2)>,
                        <pk(x.3), <'end_int', oi, pk(x.2)>,
                         sign(<'end_int', oi, pk(x.2)>, x.3)>
         ) ▶₀ #b )
    case OrgRootKeyLearn
    solve( St_Verifier_5( ~rid, oi, pk(x.1), $E.1,
                          <pk(~rootKey), <'end_ext', $OI, oi, pk(x.1)>,
                           sign(<'end_ext', $OI, oi, pk(x.1)>, ~rootKey)>
           ) ▶₀ #c )
      case AuthRootKeyLearn
      solve( St_Verifier_5( ~rid, oi, pk(x.1), $E.2,
                            <pk(~rootKey.1), <'end_ext', $OI.1, oi, pk(x.1)>,
                             sign(<'end_ext', $OI.1, oi, pk(x.1)>, ~rootKey.1)>
             ) ▶₀ #d )
        case AuthRootKeyLearn
        solve( !Ltk( $Party, ~rootKey ) ▶₀ #e )
          case Ltk
          solve( !Ltk( $Party.1, ~rootKey.1 ) ▶₀ #f )
            case Ltk
            solve( !KU( sign(<'cert', $CA, oi, tlsPk>, ~skCA) ) @ #vk.56 )
              case CertificateRequest_case_1
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_2
              solve( !KU( sign(<'MHTLeaf', $Log, <'cert', $CA, $OI, pk(~skTLS)>,
                                sign(<'cert', $CA, $OI, pk(~skTLS)>, ~skCA)>,
                               ~skCT)
                     ) @ #vk.59 )
                case MHTLeafReq_case_1
                solve( !KU( sign(<'cert', $CA, <$OI, sha256(pk(x.1))>, pk(~skTLS)>,
                                 ~skCA)
                       ) @ #vk.62 )
                  case CertificateRequest_case_1
                  by contradiction /* from formulas */
                next
                  case CertificateRequest_case_2
                  by contradiction /* from formulas */
                next
                  case CertificateRequest_case_3
                  solve( !KU( sign(<'MHTLeaf', $Log,
                                    <'cert', $CA, <$OI, sha256(pk(~rootKey))>, pk(~skTLS)>,
                                    sign(<'cert', $CA, <$OI, sha256(pk(~rootKey))>, pk(~skTLS)>,
                                         ~skCA)
                                   >,
                                   ~skCT)
                         ) @ #vk.64 )
                    case MHTLeafReq_case_1
                    solve( !KU( pk(x) ) @ #vk.66 )
                      case AssetKey
                      solve( !KU( sign(<'emblem', $E, $OI>, ~assetKey) ) @ #vk.70 )
                        case SendEmblem_case_01
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_02
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_03
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_04
                        solve( !KU( pk(~rootKey) ) @ #vk.73 )
                          case Ltk
                          solve( !KU( sign(<'end_int', $OI, pk(~assetKey)>, ~rootKey)
                                 ) @ #vk.77 )
                            case EndorseAsset
                            solve( !KU( sign(<'cert', $CA.2, $OI.1, tlsPk>, ~skCA.2)
                                   ) @ #vk.87 )
                              case CertificateRequest_case_1
                              by contradiction /* from formulas */
                            next
                              case CertificateRequest_case_2
                              solve( !KU( sign(<'MHTLeaf', $Log.2,
                                                <'cert', $CA.2, $OI.1, pk(~skTLS.1)>,
                                                sign(<'cert', $CA.2, $OI.1, pk(~skTLS.1)>, ~skCA.2)
                                               >,
                                               ~skCT.2)
                                     ) @ #vk.88 )
                                case MHTLeafReq_case_1
                                solve( !KU( sign(<'cert', $CA.2, <$OI.1, sha256(pk(~rootKey.1))>,
                                                  pk(~skTLS.1)>,
                                                 ~skCA.2)
                                       ) @ #vk.91 )
                                  case CertificateRequest_case_1
                                  by contradiction /* from formulas */
                                next
                                  case CertificateRequest_case_2
                                  by contradiction /* from formulas */
                                next
                                  case CertificateRequest_case_3
                                  solve( !KU( sign(<'MHTLeaf', $Log.2,
                                                    <'cert', $CA.2,
                                                     <$OI.1, sha256(pk(~rootKey.1))>, pk(~skTLS.1)
                                                    >,
                                                    sign(<'cert', $CA.2,
                                                          <$OI.1, sha256(pk(~rootKey.1))>,
                                                          pk(~skTLS.1)>,
                                                         ~skCA.2)
                                                   >,
                                                   ~skCT.2)
                                         ) @ #vk.93 )
                                    case MHTLeafReq_case_1
                                    solve( !KU( pk(~rootKey.1) ) @ #vk.95 )
                                      case Ltk
                                      solve( !KU( sign(<'end_ext', $OI.1, $OI, pk(~rootKey)>,
                                                       ~rootKey.1)
                                             ) @ #vk.98 )
                                        case EndorseParty
                                        solve( !KU( sign(<'cert', $CA.4, $OI.2, tlsPk>, ~skCA.4)
                                               ) @ #vk.108 )
                                          case CertificateRequest_case_1
                                          by contradiction /* from formulas */
                                        next
                                          case CertificateRequest_case_2
                                          solve( !KU( sign(<'MHTLeaf', $Log.4,
                                                            <'cert', $CA.4, $OI.2, pk(~skTLS.2)>,
                                                            sign(<'cert', $CA.4, $OI.2, pk(~skTLS.2)
                                                                 >,
                                                                 ~skCA.4)
                                                           >,
                                                           ~skCT.4)
                                                 ) @ #vk.109 )
                                            case MHTLeafReq_case_1
                                            solve( !KU( sign(<'cert', $CA.4,
                                                              <$OI.2, sha256(pk(~rootKey.2))>,
                                                              pk(~skTLS.2)>,
                                                             ~skCA.4)
                                                   ) @ #vk.112 )
                                              case CertificateRequest_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case CertificateRequest_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case CertificateRequest_case_3
                                              solve( !KU( sign(<'MHTLeaf', $Log.4,
                                                                <'cert', $CA.4,
                                                                 <$OI.2, sha256(pk(~rootKey.2))>,
                                                                 pk(~skTLS.2)>,
                                                                sign(<'cert', $CA.4,
                                                                      <$OI.2, sha256(pk(~rootKey.2))
                                                                      >,
                                                                      pk(~skTLS.2)>,
                                                                     ~skCA.4)
                                                               >,
                                                               ~skCT.4)
                                                     ) @ #vk.114 )
                                                case MHTLeafReq_case_1
                                                solve( !KU( pk(~rootKey.2) ) @ #vk.116 )
                                                  case Ltk
                                                  solve( !KU( sign(<'end_ext', $OI.2, $OI,
                                                                    pk(~rootKey)>,
                                                                   ~rootKey.2)
                                                         ) @ #vk.118 )
                                                    case EndorseParty
                                                    solve( !TLSKey( $A, $CA, $OI, ~skTLS
                                                           ) ▶₀ #vr.31 )
                                                      case TLSKeyRegister
                                                      solve( !TLSKey( $A, $CA.6, $OI.3, ~skUser
                                                             ) ▶₀ #vr.42 )
                                                        case TLSKeyRegister
                                                        solve( !TLSKey( $Party, $CA.2, $OI.1,
                                                                        ~skTLS.1
                                                               ) ▶₀ #vr.59 )
                                                          case TLSKeyRegister
                                                          solve( !TLSKey( $Party.1, $CA.4, $OI.2,
                                                                          ~skTLS.2
                                                                 ) ▶₀ #vr.72 )
                                                            case TLSKeyRegister
                                                            solve( !DomainOwner( $A, $OI
                                                                   ) ▶₁ #vr.30 )
                                                              case DomainRegister
                                                              solve( !DomainOwner( $A, $OI.3
                                                                     ) ▶₁ #vr.47 )
                                                                case DomainRegister
                                                                solve( !DomainOwner( $Party, $OI.1
                                                                       ) ▶₁ #vr.58 )
                                                                  case DomainRegister
                                                                  solve( !DomainOwner( $Party.1,
                                                                                       $OI.2
                                                                         ) ▶₁ #vr.71 )
                                                                    case DomainRegister
                                                                    solve( !KU( pk(~skTLS)
                                                                           ) @ #vk.85 )
                                                                      case TLSKeyRegister
                                                                      solve( !KU( pk(~skUser)
                                                                             ) @ #vk.127 )
                                                                        case TLSKeyRegister
                                                                        solve( !KU( sign(<'cert',
                                                                                          $CA.6,
                                                                                          $OI.3,
                                                                                          pk(~skUser)
                                                                                         >,
                                                                                         ~skCA.6)
                                                                               ) @ #vk.128 )
                                                                          case CertificateRequest
                                                                          solve( !KU( sign(<'cert',
                                                                                            $CA.6,
                                                                                            <$OI.3,
                                                                                             sha256(pk(~rootKey.3))
                                                                                            >,
                                                                                            pk(~skUser)
                                                                                           >,
                                                                                           ~skCA.6)
                                                                                 ) @ #vk.129 )
                                                                            case CertificateRequest
                                                                            solve( !KU( pk(~skTLS.1)
                                                                                   ) @ #vk.109 )
                                                                              case TLSKeyRegister
                                                                              solve( !KU( pk(~skTLS.2)
                                                                                     ) @ #vk.124 )
                                                                                case TLSKeyRegister
                                                                                solve( St_Verifier_3( ~rid,
                                                                                                      $OI,
                                                                                                      pk(~rootKey),
                                                                                                      $E.1
                                                                                       ) ▶₀ #vr.8 )
                                                                                  case VerifyAuthorityEndorsement
                                                                                  solve( St_Verifier_3( ~rid,
                                                                                                        $OI,
                                                                                                        pk(~rootKey),
                                                                                                        $E.2
                                                                                         ) ▶₀ #vr.14 )
                                                                                    case VerifyAuthorityEndorsement
                                                                                    by sorry
                                                                                  next
                                                                                    case VerifyOrganizationalEmblem
                                                                                    solve( St_Verifier_3( ~rid,
                                                                                                          $OI,
                                                                                                          pk(~rootKey),
                                                                                                          $E.1
                                                                                           ) ▶₀ #vr.81 )
                                                                                      case VerifyAuthorityEndorsement
                                                                                      by sorry
                                                                                    next
                                                                                      case VerifyOrganizationalEmblem
                                                                                      solve( !KU( sha256(pk(~rootKey))
                                                                                             ) @ #vk.103 )
                                                                                        case ReceiveAuthorityEndorsement
                                                                                        by sorry
                                                                                      next
                                                                                        case ReceiveOrganizationalEmblem
                                                                                        solve( !KU( sha256(pk(~rootKey.1))
                                                                                               ) @ #vk.118 )
                                                                                          case ReceiveAuthorityEndorsement
                                                                                          by sorry
                                                                                        next
                                                                                          case ReceiveOrganizationalEmblem
                                                                                          solve( !KU( sha256(pk(~rootKey.2))
                                                                                                 ) @ #vk.133 )
                                                                                            case ReceiveAuthorityEndorsement
                                                                                            by sorry
                                                                                          next
                                                                                            case ReceiveOrganizationalEmblem
                                                                                            solve( !KU( sha256(pk(~rootKey.3))
                                                                                                   ) @ #vk.144 )
                                                                                              case ReceiveAuthorityEndorsement
                                                                                              by sorry
                                                                                            next
                                                                                              case ReceiveOrganizationalEmblem
                                                                                              solve( !KU( pk(~rootKey.3)
                                                                                                     ) @ #vk.181 )
                                                                                                case Ltk
                                                                                                SOLVED // trace found
                                                                                              next
                                                                                                case c_pk
                                                                                                by sorry
                                                                                              qed
                                                                                            next
                                                                                              case c_sha256
                                                                                              by sorry
                                                                                            qed
                                                                                          next
                                                                                            case c_sha256
                                                                                            by sorry
                                                                                          qed
                                                                                        next
                                                                                          case c_sha256
                                                                                          by sorry
                                                                                        qed
                                                                                      next
                                                                                        case c_sha256
                                                                                        by sorry
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                next
                                                                                  case VerifyOrganizationalEmblem
                                                                                  by sorry
                                                                                     /* removed */
                                                                                qed
                                                                              next
                                                                                case c_pk
                                                                                by sorry
                                                                              qed
                                                                            next
                                                                              case c_pk
                                                                              by sorry
                                                                            qed
                                                                          next
                                                                            case FraudulentCertificate
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case c_sign
                                                                            by sorry
                                                                          qed
                                                                        next
                                                                          case FraudulentCertificate
                                                                          by contradiction
                                                                             /* from formulas */
                                                                        next
                                                                          case c_sign
                                                                          by sorry
                                                                        qed
                                                                      next
                                                                        case c_pk
                                                                        by sorry
                                                                      qed
                                                                    next
                                                                      case c_pk
                                                                      by sorry
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_sign
                                                    by sorry
                                                  qed
                                                next
                                                  case c_pk
                                                  by sorry
                                                qed
                                              next
                                                case MHTLeafReq_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case c_sign
                                                by sorry
                                              qed
                                            next
                                              case FraudulentCertificate
                                              by contradiction /* from formulas */
                                            next
                                              case c_sign
                                              by sorry
                                            qed
                                          next
                                            case MHTLeafReq_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case c_sign
                                            by sorry
                                          qed
                                        next
                                          case CertificateRequest_case_3
                                          by contradiction /* from formulas */
                                        next
                                          case CertificateRequest_case_4
                                          by sorry
                                        next
                                          case FraudulentCertificate
                                          by contradiction /* from formulas */
                                        next
                                          case c_sign
                                          by sorry
                                        qed
                                      next
                                        case c_sign
                                        by sorry
                                      qed
                                    next
                                      case c_pk
                                      by sorry
                                    qed
                                  next
                                    case MHTLeafReq_case_2
                                    by contradiction /* from formulas */
                                  next
                                    case c_sign
                                    by sorry
                                  qed
                                next
                                  case FraudulentCertificate
                                  by contradiction /* from formulas */
                                next
                                  case c_sign
                                  by sorry
                                qed
                              next
                                case MHTLeafReq_case_2
                                by contradiction /* from formulas */
                              next
                                case c_sign
                                by sorry
                              qed
                            next
                              case CertificateRequest_case_3
                              by contradiction /* from formulas */
                            next
                              case CertificateRequest_case_4
                              by sorry
                            next
                              case FraudulentCertificate
                              by contradiction /* from formulas */
                            next
                              case c_sign
                              by sorry
                            qed
                          next
                            case c_sign
                            by sorry
                          qed
                        next
                          case c_pk
                          by sorry
                        qed
                      next
                        case SendEmblem_case_05
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_06
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_07
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_08
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_09
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_10
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_11
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_12
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_13
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_14
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_15
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_16
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_17
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_18
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_19
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_20
                        by sorry
                      next
                        case SendEmblem_case_21
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_22
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_23
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_24
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_25
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_26
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_27
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_28
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_29
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_30
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_31
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_32
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_33
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_34
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_35
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_36
                        by sorry
                      next
                        case SendEmblem_case_37
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_38
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_39
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_40
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_41
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_42
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_43
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_44
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_45
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_46
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_47
                        by contradiction /* from formulas */
                      next
                        case SendEmblem_case_48
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by sorry
                      qed
                    next
                      case CA
                      by sorry
                    next
                      case Ltk
                      by sorry
                    next
                      case TLSKeyRegister_case_1
                      by contradiction /* from formulas */
                    next
                      case TLSKeyRegister_case_2
                      by sorry
                    next
                      case TLSKeyRegister_case_3
                      by contradiction /* from formulas */
                    next
                      case TLSKeyRegister_case_4
                      by sorry
                    next
                      case c_pk
                      by sorry
                    qed
                  next
                    case MHTLeafReq_case_2
                    by contradiction /* from formulas */
                  next
                    case c_sign
                    by sorry
                  qed
                next
                  case FraudulentCertificate
                  by contradiction /* from formulas */
                next
                  case c_sign
                  by sorry
                qed
              next
                case MHTLeafReq_case_2
                by contradiction /* from formulas */
              next
                case c_sign
                by sorry
              qed
            next
              case CertificateRequest_case_3
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_4
              by sorry
            next
              case CertificateRequest_case_5
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_6
              by sorry
            next
              case CertificateRequest_case_7
              by contradiction /* from formulas */
            next
              case CertificateRequest_case_8
              by sorry
            next
              case FraudulentCertificate
              by contradiction /* from formulas */
            next
              case c_sign
              by sorry
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma VerifiedAuthorityOrigin [reuse, use_induction]:
  all-traces
  "∀ loop auth authKey oi rootKey #t1.
    (VerifiedAuthorityEndorsement( loop, auth, authKey, oi, rootKey
     ) @ #t1) ⇒
    ((∃ #t2.
       (VerifiedRootEndorsement( loop, oi, rootKey ) @ #t2) ∧
       (#t2 < #t1)) ∧
     (∀ p1 p2 rk1 rk2 #t2 #t3.
       ((VerifiedRootEndorsement( loop, p1, rk1 ) @ #t2) ∧
        (VerifiedRootEndorsement( loop, p2, rk2 ) @ #t3)) ⇒
       (((((oi = p1) ∧ (p1 = p2)) ∧ (#t2 = #t3)) ∧ (rootKey = rk1)) ∧
        (rk1 = rk2))))"
/*
guarded formula characterizing all counter-examples:
"∃ loop auth authKey oi rootKey #t1.
  (VerifiedAuthorityEndorsement( loop, auth, authKey, oi, rootKey
   ) @ #t1)
 ∧
  ((∀ #t2.
     (VerifiedRootEndorsement( loop, oi, rootKey ) @ #t2)
    ⇒
     ¬(#t2 < #t1)) ∨
   (∃ p1 p2 rk1 rk2 #t2 #t3.
     (VerifiedRootEndorsement( loop, p1, rk1 ) @ #t2) ∧
     (VerifiedRootEndorsement( loop, p2, rk2 ) @ #t3)
    ∧
     ((¬(oi = p1)) ∨
      (¬(p1 = p2)) ∨
      (¬(#t2 = #t3)) ∨
      (¬(rootKey = rk1)) ∨
      (¬(rk1 = rk2)))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#t1))  ∥
         ((∃ #t2.
            (VerifiedRootEndorsement( ~rid, oi, rootKey ) @ #t2)
           ∧
            (¬(last(#t2))) ∧ (#t2 < #t1)) ∧
          (∀ p1 p2 rk1 rk2 #t2 #t3.
            (VerifiedRootEndorsement( ~rid, p1, rk1 ) @ #t2) ∧
            (VerifiedRootEndorsement( ~rid, p2, rk2 ) @ #t3)
           ⇒
            ((last(#t3)) ∨
             (last(#t2)) ∨
             ((oi = p1) ∧
              (p1 = p2) ∧
              (#t2 = #t3) ∧
              (rootKey = rk1) ∧
              (rk1 = rk2))))) )
    case case_1
    solve( (∀ #t2.
             (VerifiedRootEndorsement( ~rid, oi, rootKey ) @ #t2)
            ⇒
             ¬(#t2 < #t1))  ∥
           (∃ p1 p2 rk1 rk2 #t2 #t3.
             (VerifiedRootEndorsement( ~rid, p1, rk1 ) @ #t2) ∧
             (VerifiedRootEndorsement( ~rid, p2, rk2 ) @ #t3)
            ∧
             ((¬(oi = p1)) ∨
              (¬(p1 = p2)) ∨
              (¬(#t2 = #t3)) ∨
              (¬(rootKey = rk1)) ∨
              (¬(rk1 = rk2)))) )
      case case_1
      solve( St_Verifier_5( ~rid, oi, rootKey, $E,
                            <pk(x), <'end_ext', auth, oi, rootKey>,
                             sign(<'end_ext', auth, oi, rootKey>, x)>
             ) ▶₀ #t1 )
        case AuthRootKeyLearn
        solve( St_Verifier_3( ~rid, oi, rootKey, $E ) ▶₀ #vr.1 )
          case VerifyAuthorityEndorsement
          by contradiction /* from formulas */
        next
          case VerifyOrganizationalEmblem
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      solve( St_Verifier_5( ~rid, oi, rootKey, $E,
                            <pk(x), <'end_ext', auth, oi, rootKey>,
                             sign(<'end_ext', auth, oi, rootKey>, x)>
             ) ▶₀ #t1 )
        case AuthRootKeyLearn
        solve( St_Verifier_2( ~rid,
                              <pk(x.1), <'emblem', $E.1, p1>, sign(<'emblem', $E.1, p1>, x.1)>,
                              <pk(x.2), <'end_int', p1, pk(x.1)>,
                               sign(<'end_int', p1, pk(x.1)>, x.2)>
               ) ▶₀ #t2 )
          case OrgRootKeyLearn
          solve( St_Verifier_2( ~rid,
                                <pk(x.3), <'emblem', $E.2, p2>, sign(<'emblem', $E.2, p2>, x.3)>,
                                <pk(x.4), <'end_int', p2, pk(x.3)>,
                                 sign(<'end_int', p2, pk(x.3)>, x.4)>
                 ) ▶₀ #t3 )
            case OrgRootKeyLearn
            solve( St_Verifier_3( ~rid, oi, rootKey, $E ) ▶₀ #vr.1 )
              case VerifyAuthorityEndorsement
              by contradiction /* from formulas */
            next
              case VerifyOrganizationalEmblem
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (∀ #t2.
             (VerifiedRootEndorsement( ~rid, oi, pk(x) ) @ #t2)
            ⇒
             ¬(#t2 < #t1))  ∥
           (∃ p1 p2 rk1 rk2 #t2 #t3.
             (VerifiedRootEndorsement( ~rid, p1, rk1 ) @ #t2) ∧
             (VerifiedRootEndorsement( ~rid, p2, rk2 ) @ #t3)
            ∧
             ((¬(oi = p1)) ∨
              (¬(p1 = p2)) ∨
              (¬(#t2 = #t3)) ∨
              (¬(pk(x) = rk1)) ∨
              (¬(rk1 = rk2)))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      solve( (last(#t3))  ∥ (last(#t2.1))  ∥
             ((oi = p1) ∧
              (p1 = p2) ∧
              (#t2.1 = #t3) ∧
              (pk(x) = pk(x.4)) ∧
              (pk(x.4) = pk(x.6))) )
        case case_1
        solve( (¬(oi = p1))  ∥ (¬(p1 = p2))  ∥ (¬(#t2.1 = #last))  ∥
               (¬(pk(x.2) = pk(x.6)))  ∥ (¬(pk(x.6) = pk(x.1))) )
          case case_1
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p2>, sign(<'emblem', $E, p2>, x)>,
                                <pk(x.1), <'end_int', p2, pk(x)>, sign(<'end_int', p2, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t2.1))  ∥
                   ((oi = p1) ∧
                    (p1 = oi) ∧
                    (#t2.1 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p2>, sign(<'emblem', $E, p2>, x)>,
                                <pk(x.1), <'end_int', p2, pk(x)>, sign(<'end_int', p2, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t2.1))  ∥
                   ((oi = p1) ∧
                    (p1 = oi) ∧
                    (#t2.1 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_3
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p2>, sign(<'emblem', $E, p2>, x)>,
                                <pk(x.1), <'end_int', p2, pk(x)>, sign(<'end_int', p2, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                  <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                   sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                   ) ▶₀ #t1 )
              case AuthRootKeyLearn
              solve( St_Verifier_2( ~rid,
                                    <pk(x.4), <'emblem', $E.2, oi>, sign(<'emblem', $E.2, oi>, x.4)
                                    >,
                                    <pk(x.2), <'end_int', oi, pk(x.4)>,
                                     sign(<'end_int', oi, pk(x.4)>, x.2)>
                     ) ▶₀ #t2 )
                case OrgRootKeyLearn
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_4
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p2>, sign(<'emblem', $E, p2>, x)>,
                                <pk(x.1), <'end_int', p2, pk(x)>, sign(<'end_int', p2, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t2.1))  ∥
                   ((oi = p1) ∧
                    (p1 = oi) ∧
                    (#t2.1 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_5
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p2>, sign(<'emblem', $E, p2>, x)>,
                                <pk(x.1), <'end_int', p2, pk(x)>, sign(<'end_int', p2, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t2.1))  ∥
                   ((oi = p1) ∧
                    (p1 = oi) ∧
                    (#t2.1 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( (¬(oi = p1))  ∥ (¬(p1 = p2))  ∥ (¬(#last = #t3))  ∥
               (¬(pk(x.2) = pk(x.1)))  ∥ (¬(pk(x.1) = pk(x.6))) )
          case case_1
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p1>, sign(<'emblem', $E, p1>, x)>,
                                <pk(x.1), <'end_int', p1, pk(x)>, sign(<'end_int', p1, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t3))  ∥
                   ((oi = p2) ∧
                    (p2 = oi) ∧
                    (#t3 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p1>, sign(<'emblem', $E, p1>, x)>,
                                <pk(x.1), <'end_int', p1, pk(x)>, sign(<'end_int', p1, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t3))  ∥
                   ((oi = p2) ∧
                    (p2 = oi) ∧
                    (#t3 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_3
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p1>, sign(<'emblem', $E, p1>, x)>,
                                <pk(x.1), <'end_int', p1, pk(x)>, sign(<'end_int', p1, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                  <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                   sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                   ) ▶₀ #t1 )
              case AuthRootKeyLearn
              solve( St_Verifier_2( ~rid,
                                    <pk(x.4), <'emblem', $E.2, oi>, sign(<'emblem', $E.2, oi>, x.4)
                                    >,
                                    <pk(x.2), <'end_int', oi, pk(x.4)>,
                                     sign(<'end_int', oi, pk(x.4)>, x.2)>
                     ) ▶₀ #t2 )
                case OrgRootKeyLearn
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_4
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p1>, sign(<'emblem', $E, p1>, x)>,
                                <pk(x.1), <'end_int', p1, pk(x)>, sign(<'end_int', p1, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t3))  ∥
                   ((oi = p2) ∧
                    (p2 = oi) ∧
                    (#t3 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_5
          solve( St_Verifier_2( ~rid,
                                <pk(x), <'emblem', $E, p1>, sign(<'emblem', $E, p1>, x)>,
                                <pk(x.1), <'end_int', p1, pk(x)>, sign(<'end_int', p1, pk(x)>, x.1)
                                >
                 ) ▶₀ #last )
            case OrgRootKeyLearn
            solve( (last(#t3))  ∥
                   ((oi = p2) ∧
                    (p2 = oi) ∧
                    (#t3 = #t2) ∧
                    (pk(x.2) = pk(x.6)) ∧
                    (pk(x.6) = pk(x.2))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_Verifier_5( ~rid, oi, pk(x.2), $E.1,
                                    <pk(x.3), <'end_ext', auth, oi, pk(x.2)>,
                                     sign(<'end_ext', auth, oi, pk(x.2)>, x.3)>
                     ) ▶₀ #t1 )
                case AuthRootKeyLearn
                solve( St_Verifier_2( ~rid,
                                      <pk(x.4), <'emblem', $E.2, oi>,
                                       sign(<'emblem', $E.2, oi>, x.4)>,
                                      <pk(x.2), <'end_int', oi, pk(x.4)>,
                                       sign(<'end_int', oi, pk(x.4)>, x.2)>
                       ) ▶₀ #t2 )
                  case OrgRootKeyLearn
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma AuthenticEmblem:
  all-traces
  "∀ id oi asset assetKey rootKey #t1 #t2.
    ((VerifiedEndorsed( id, oi, asset, assetKey ) @ #t1) ∧
     (VerifiedRootEndorsement( id, oi, rootKey ) @ #t2)) ⇒
    (((((∃ pp #x #y.
          (OI( pp, oi ) @ #x) ∧ (IsAsset( pp, asset, assetKey ) @ #y)) ∨
        (∃ p #x #y.
          (OI( p, oi ) @ #x) ∧ (CompromisedADEMParty( p, rootKey ) @ #y))) ∨
       (∃ otherA #x. CompromisedAssetKey( otherA, assetKey ) @ #x)) ∨
      (¬(∃ authOi authPk endorsedKey #t3.
          VerifiedAuthorityEndorsement( id, authPk, authOi, oi, endorsedKey
          ) @ #t3))) ∨
     (∀ authOI authPk endorsedKey #x.
       (VerifiedAuthorityEndorsement( id, authOI, authPk, oi, endorsedKey
        ) @ #x) ⇒
       ((∃ p #y #z.
          (OI( p, authOI ) @ #y) ∧
          (CompromisedADEMParty( p, authPk ) @ #z)) ∨
        (¬(∃ p #y. IsRootPK( p, authOI, authPk ) @ #y)))))"
/*
guarded formula characterizing all counter-examples:
"∃ id oi asset assetKey rootKey #t1 #t2.
  (VerifiedEndorsed( id, oi, asset, assetKey ) @ #t1) ∧
  (VerifiedRootEndorsement( id, oi, rootKey ) @ #t2)
 ∧
  (∀ pp #x #y.
    (OI( pp, oi ) @ #x) ∧ (IsAsset( pp, asset, assetKey ) @ #y) ⇒ ⊥) ∧
  (∀ p #x #y.
    (OI( p, oi ) @ #x) ∧ (CompromisedADEMParty( p, rootKey ) @ #y)
   ⇒
    ⊥) ∧
  (∀ otherA #x. (CompromisedAssetKey( otherA, assetKey ) @ #x) ⇒ ⊥) ∧
  (∃ authOi authPk endorsedKey #t3.
    (VerifiedAuthorityEndorsement( id, authPk, authOi, oi, endorsedKey
     ) @ #t3)) ∧
  (∃ authOI authPk endorsedKey #x.
    (VerifiedAuthorityEndorsement( id, authOI, authPk, oi, endorsedKey
     ) @ #x)
   ∧
    (∀ p #y #z.
      (OI( p, authOI ) @ #y) ∧ (CompromisedADEMParty( p, authPk ) @ #z)
     ⇒
      ⊥) ∧
    (∃ p #y. (IsRootPK( p, authOI, authPk ) @ #y)))"
*/
simplify
solve( !Ltk( $Party, ~rootKey ) ▶₀ #y )
  case Ltk
  solve( St_Verifier_2( ~rid,
                        <pk(x), <'emblem', $E, oi>, sign(<'emblem', $E, oi>, x)>,
                        <pk(x.1), <'end_int', oi, pk(x)>, sign(<'end_int', oi, pk(x)>, x.1)
                        >
         ) ▶₀ #t1 )
    case OrgRootKeyLearn
    solve( !KU( sign(<'emblem', $E, oi>, x) ) @ #vk.35 )
      case FraudulentCertificate
      solve( !KU( sign(<'end_int', oi, pk(~skCA)>, x) ) @ #vk.40 )
        case FraudulentCertificate
        solve( St_Verifier_5( ~rid, oi, pk(~skCA.1), $E.1,
                              <pk(x), <'end_ext', authPk, oi, pk(~skCA.1)>,
                               sign(<'end_ext', authPk, oi, pk(~skCA.1)>, x)>
               ) ▶₀ #t3 )
          case AuthRootKeyLearn
          solve( St_Verifier_5( ~rid, oi, pk(~skCA.1), $E.2,
                                <pk(~rootKey), <'end_ext', $OI, oi, pk(~skCA.1)>,
                                 sign(<'end_ext', $OI, oi, pk(~skCA.1)>, ~rootKey)>
                 ) ▶₀ #x.1 )
            case AuthRootKeyLearn
            solve( !KU( sign(<'end_ext', $OI, oi, pk(~skCA.1)>, ~rootKey)
                   ) @ #vk.102 )
              case c_sign
              solve( !KU( ~rootKey ) @ #vk.103 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( St_Verifier_5( ~rid, oi, pk(x), $E.1,
                              <pk(x.1), <'end_ext', authPk, oi, pk(x)>,
                               sign(<'end_ext', authPk, oi, pk(x)>, x.1)>
               ) ▶₀ #t3 )
          case AuthRootKeyLearn
          solve( St_Verifier_5( ~rid, oi, pk(x), $E.2,
                                <pk(~rootKey), <'end_ext', $OI, oi, pk(x)>,
                                 sign(<'end_ext', $OI, oi, pk(x)>, ~rootKey)>
                 ) ▶₀ #x.2 )
            case AuthRootKeyLearn
            solve( !KU( sign(<'end_ext', $OI, oi, pk(x)>, ~rootKey)
                   ) @ #vk.103 )
              case EndorseParty
              solve( !KU( ~rootKey ) @ #vk.65 )
                case Reveal
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~rootKey ) @ #vk.104 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case SendEmblem_case_01
      by contradiction /* from formulas */
    next
      case SendEmblem_case_02
      by contradiction /* from formulas */
    next
      case SendEmblem_case_03
      by contradiction /* from formulas */
    next
      case SendEmblem_case_04
      by contradiction /* from formulas */
    next
      case SendEmblem_case_05
      by contradiction /* from formulas */
    next
      case SendEmblem_case_06
      by contradiction /* from formulas */
    next
      case SendEmblem_case_07
      by contradiction /* from formulas */
    next
      case SendEmblem_case_08
      by contradiction /* from formulas */
    next
      case SendEmblem_case_09
      by contradiction /* from formulas */
    next
      case SendEmblem_case_10
      by contradiction /* from formulas */
    next
      case SendEmblem_case_11
      by contradiction /* from formulas */
    next
      case SendEmblem_case_12
      by contradiction /* from formulas */
    next
      case SendEmblem_case_13
      by contradiction /* from formulas */
    next
      case SendEmblem_case_14
      by contradiction /* from formulas */
    next
      case SendEmblem_case_15
      by contradiction /* from formulas */
    next
      case SendEmblem_case_16
      by contradiction /* from formulas */
    next
      case SendEmblem_case_17
      by contradiction /* from formulas */
    next
      case SendEmblem_case_18
      by contradiction /* from formulas */
    next
      case SendEmblem_case_19
      by contradiction /* from formulas */
    next
      case SendEmblem_case_20
      by contradiction /* from formulas */
    next
      case SendEmblem_case_21
      by contradiction /* from formulas */
    next
      case SendEmblem_case_22
      by contradiction /* from formulas */
    next
      case SendEmblem_case_23
      by contradiction /* from formulas */
    next
      case SendEmblem_case_24
      by contradiction /* from formulas */
    next
      case SendEmblem_case_25
      by contradiction /* from formulas */
    next
      case SendEmblem_case_26
      by contradiction /* from formulas */
    next
      case SendEmblem_case_27
      by contradiction /* from formulas */
    next
      case SendEmblem_case_28
      by contradiction /* from formulas */
    next
      case SendEmblem_case_29
      by contradiction /* from formulas */
    next
      case SendEmblem_case_30
      by contradiction /* from formulas */
    next
      case SendEmblem_case_31
      by contradiction /* from formulas */
    next
      case SendEmblem_case_32
      by contradiction /* from formulas */
    next
      case SendEmblem_case_33
      by contradiction /* from formulas */
    next
      case SendEmblem_case_34
      by contradiction /* from formulas */
    next
      case SendEmblem_case_35
      by contradiction /* from formulas */
    next
      case SendEmblem_case_36
      by contradiction /* from formulas */
    next
      case SendEmblem_case_37
      by contradiction /* from formulas */
    next
      case SendEmblem_case_38
      by contradiction /* from formulas */
    next
      case SendEmblem_case_39
      by contradiction /* from formulas */
    next
      case SendEmblem_case_40
      by contradiction /* from formulas */
    next
      case SendEmblem_case_41
      by contradiction /* from formulas */
    next
      case SendEmblem_case_42
      by contradiction /* from formulas */
    next
      case SendEmblem_case_43
      by contradiction /* from formulas */
    next
      case SendEmblem_case_44
      by contradiction /* from formulas */
    next
      case SendEmblem_case_45
      by contradiction /* from formulas */
    next
      case SendEmblem_case_46
      by contradiction /* from formulas */
    next
      case SendEmblem_case_47
      by contradiction /* from formulas */
    next
      case SendEmblem_case_48
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( sign(<'end_int', oi, pk(x)>, x.1) ) @ #vk.40 )
        case EndorseAsset_case_01
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_02
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_03
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_04
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_05
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_06
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_07
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_08
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_09
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_10
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_11
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_12
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_13
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_14
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_15
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_16
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_17
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_18
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_19
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_20
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_21
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_22
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_23
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_24
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_25
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_26
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_27
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_28
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_29
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_30
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_31
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_32
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_33
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_34
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_35
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_36
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_37
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_38
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_39
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_40
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_41
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_42
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_43
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_44
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_45
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_46
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_47
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case EndorseAsset_case_48
        solve( !KU( ~assetKey ) @ #vk.43 )
          case RevealAsset
          by contradiction /* from formulas */
        qed
      next
        case FraudulentCertificate
        solve( St_Verifier_5( ~rid, oi, pk(~skCA), $E.1,
                              <pk(x.1), <'end_ext', authPk, oi, pk(~skCA)>,
                               sign(<'end_ext', authPk, oi, pk(~skCA)>, x.1)>
               ) ▶₀ #t3 )
          case AuthRootKeyLearn
          solve( St_Verifier_5( ~rid, oi, pk(~skCA), $E.2,
                                <pk(~rootKey), <'end_ext', $OI, oi, pk(~skCA)>,
                                 sign(<'end_ext', $OI, oi, pk(~skCA)>, ~rootKey)>
                 ) ▶₀ #x.2 )
            case AuthRootKeyLearn
            solve( !KU( sign(<'end_ext', $OI, oi, pk(~skCA)>, ~rootKey)
                   ) @ #vk.103 )
              case c_sign
              solve( !KU( ~rootKey ) @ #vk.104 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( St_Verifier_5( ~rid, oi, pk(x.1), $E.1,
                              <pk(x.2), <'end_ext', authPk, oi, pk(x.1)>,
                               sign(<'end_ext', authPk, oi, pk(x.1)>, x.2)>
               ) ▶₀ #t3 )
          case AuthRootKeyLearn
          solve( St_Verifier_5( ~rid, oi, pk(x.1), $E.2,
                                <pk(~rootKey), <'end_ext', $OI, oi, pk(x.1)>,
                                 sign(<'end_ext', $OI, oi, pk(x.1)>, ~rootKey)>
                 ) ▶₀ #x.3 )
            case AuthRootKeyLearn
            solve( !KU( sign(<'end_ext', $OI, oi, pk(x.1)>, ~rootKey)
                   ) @ #vk.104 )
              case EndorseParty
              solve( !KU( ~rootKey ) @ #vk.66 )
                case Reveal
                by contradiction /* from formulas */
              qed
            next
              case c_sign
              solve( !KU( ~rootKey ) @ #vk.105 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma CanDisupte:
  exists-trace
  "∃ p log ca d pk #t. Dispute( p, log, ca, d, pk ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ p log ca d pk #t. (Dispute( p, log, ca, d, pk ) @ #t)"
*/
simplify
solve( !MHTLeaf( $Log, <<'cert', $SigningCA, d, pk>, sig> ) ▶₀ #t )
  case AdversarialAppend
  solve( !TLSKey( $P, $CA, d, skTLS ) ▶₁ #t )
    case TLSKeyRegister_case_1
    SOLVED // trace found
  next
    case TLSKeyRegister_case_2
    SOLVED // trace found
  next
    case TLSKeyRegister_case_3
    by sorry
  next
    case TLSKeyRegister_case_4
    by sorry
  next
    case TLSKeyShare_case_1
    by sorry
  next
    case TLSKeyShare_case_2
    by sorry
  next
    case TLSKeyShare_case_3
    by sorry
  next
    case TLSKeyShare_case_4
    by sorry
  qed
next
  case Submit
  by sorry
qed

lemma CAAccountability:
  all-traces
  "∀ p log ca d pk skCA #x #y #z.
    (((Dispute( p, log, ca, d, pk ) @ #x) ∧ (CASk( ca, skCA ) @ #y)) ∧
     (LogInclusion( log,
                    <<'cert', ca, d, pk>, sign(<'cert', ca, d, pk>, skCA)>
      ) @ #z)) ⇒
    (∃ #a. CompromisedParty( ca ) @ #a)"
/*
guarded formula characterizing all counter-examples:
"∃ p log ca d pk skCA #x #y #z.
  (Dispute( p, log, ca, d, pk ) @ #x) ∧
  (CASk( ca, skCA ) @ #y) ∧
  (LogInclusion( log,
                 <<'cert', ca, d, pk>, sign(<'cert', ca, d, pk>, skCA)>
   ) @ #z)
 ∧
  ∀ #a. (CompromisedParty( ca ) @ #a) ⇒ ⊥"
*/
simplify
solve( LogInclusion( $Log,
                     <<'cert', $SigningCA, d, pk>,
                      sign(<'cert', $SigningCA, d, pk>, ~skCA)>
       ) @ #z )
  case AdversarialAppend
  solve( !KU( sign(<'cert', $SigningCA, d, pk>, ~skCA) ) @ #vk.8 )
    case CertificateRequest_case_1
    solve( !TLSKey( $P, $CA, d, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_2
    solve( !TLSKey( $P, $CA, $OI, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_3
    solve( !TLSKey( $P, $CA, d, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_4
    solve( !TLSKey( $P, $CA, $OI, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_5
    solve( !TLSKey( $P, $CA, <d, sub>, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_6
    solve( !TLSKey( $P, $CA, <$OI, sha256(pk(~rootKey))>, skTLS.1
           ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_7
    solve( !TLSKey( $P, $CA, <d1, sub>, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_8
    solve( !TLSKey( $P, $CA, <$OI, sha256(pk(~rootKey))>, skTLS.1
           ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case FraudulentCertificate
    by contradiction /* from formulas */
  next
    case c_sign
    by solve( !KU( ~skCA ) @ #vk.9 )
  qed
next
  case Submit
  solve( !KU( sign(<'cert', $SigningCA, d, pk>, ~skCA) ) @ #vk.8 )
    case CertificateRequest_case_1
    solve( !TLSKey( $P, $CA, d, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_2
    solve( !TLSKey( $P, $CA, $OI, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_3
    solve( !TLSKey( $P, $CA, d, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_4
    solve( !TLSKey( $P, $CA, $OI, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_5
    solve( !TLSKey( $P, $CA, <d, sub>, skTLS.1 ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_6
    solve( !TLSKey( $P, $CA, <$OI, sha256(pk(~rootKey))>, skTLS.1
           ) ▶₁ #x )
      case TLSKeyRegister
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_7
    solve( !TLSKey( $P, $CA, <d1, sub>, skTLS.1 ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case CertificateRequest_case_8
    solve( !TLSKey( $P, $CA, <$OI, sha256(pk(~rootKey))>, skTLS.1
           ) ▶₁ #x )
      case TLSKeyShare
      by contradiction /* from formulas */
    qed
  next
    case FraudulentCertificate
    by contradiction /* from formulas */
  next
    case c_sign
    by solve( !KU( ~skCA ) @ #vk.9 )
  qed
qed

lemma AuthorityAccountability:
  all-traces
  "∀ p pAuth oi rk_true rk_false id oiAuth rkAuth #t1 #t2 #t3.
    ((((IsRootPK( p, oi, rk_true ) @ #t1) ∧
       (IsRootPK( pAuth, oiAuth, rkAuth ) @ #t2)) ∧
      (VerifiedAuthorityEndorsement( id, oiAuth, rkAuth, oi, rk_false
       ) @ #t3)) ∧
     (¬(rk_true = rk_false))) ⇒
    (∃ #a. CompromisedParty( pAuth ) @ #a)"
/*
guarded formula characterizing all counter-examples:
"∃ p pAuth oi rk_true rk_false id oiAuth rkAuth #t1 #t2 #t3.
  (IsRootPK( p, oi, rk_true ) @ #t1) ∧
  (IsRootPK( pAuth, oiAuth, rkAuth ) @ #t2) ∧
  (VerifiedAuthorityEndorsement( id, oiAuth, rkAuth, oi, rk_false
   ) @ #t3)
 ∧
  (¬(rk_true = rk_false)) ∧
  (∀ #a. (CompromisedParty( pAuth ) @ #a) ⇒ ⊥)"
*/
simplify
solve( !Ltk( $Party, ~rootKey ) ▶₀ #t1 )
  case Ltk
  solve( !Ltk( $Party.1, ~rootKey.1 ) ▶₀ #t2 )
    case Ltk
    solve( St_Verifier_5( ~rid, $OI, pk(x), $E,
                          <pk(~rootKey.1), <'end_ext', $OI.1, $OI, pk(x)>,
                           sign(<'end_ext', $OI.1, $OI, pk(x)>, ~rootKey.1)>
           ) ▶₀ #t3 )
      case AuthRootKeyLearn
      solve( !KU( sign(<'end_ext', $OI.1, $OI, pk(x)>, ~rootKey.1)
             ) @ #vk.35 )
        case EndorseParty
        by contradiction /* from formulas */
      next
        case c_sign
        solve( !KU( ~rootKey.1 ) @ #vk.36 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma PPAccountability:
  all-traces
  "∀ p oi rk e1 assetKey id #t1 #t2 #t3.
    ((((IsRootPK( p, oi, rk ) @ #t1) ∧
       (VerifiedRootEndorsement( id, oi, rk ) @ #t2)) ∧
      (VerifiedEndorsed( id, oi, e1, assetKey ) @ #t3)) ∧
     (¬(∃ e2 #x. IsAsset( p, e2, assetKey ) @ #x))) ⇒
    (∃ #a. CompromisedParty( p ) @ #a)"
/*
guarded formula characterizing all counter-examples:
"∃ p oi rk e1 assetKey id #t1 #t2 #t3.
  (IsRootPK( p, oi, rk ) @ #t1) ∧
  (VerifiedRootEndorsement( id, oi, rk ) @ #t2) ∧
  (VerifiedEndorsed( id, oi, e1, assetKey ) @ #t3)
 ∧
  (∀ e2 #x. (IsAsset( p, e2, assetKey ) @ #x) ⇒ ⊥) ∧
  (∀ #a. (CompromisedParty( p ) @ #a) ⇒ ⊥)"
*/
simplify
solve( !Ltk( $Party, ~rootKey ) ▶₀ #t1 )
  case Ltk
  solve( St_Verifier_2( ~rid,
                        <pk(x), <'emblem', $E, $OI>, sign(<'emblem', $E, $OI>, x)>,
                        <pk(~rootKey), <'end_int', $OI, pk(x)>,
                         sign(<'end_int', $OI, pk(x)>, ~rootKey)>
         ) ▶₀ #t2 )
    case OrgRootKeyLearn
    solve( !KU( sign(<'end_int', $OI, pk(x)>, ~rootKey) ) @ #vk.40 )
      case EndorseAsset_case_01
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_02
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_03
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_04
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_05
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_06
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_07
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_08
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_09
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_10
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_11
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_12
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_13
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_14
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_15
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_16
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_17
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_18
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_19
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_20
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_21
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_22
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_23
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_24
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_25
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_26
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_27
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_28
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_29
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_30
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_31
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_32
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_33
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_34
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_35
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_36
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_37
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_38
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_39
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_40
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_41
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_42
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_43
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_44
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_45
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_46
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_47
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case EndorseAsset_case_48
      solve( St_Verifier_2( ~rid,
                            <pk(x), <'emblem', $E.1, $OI>, sign(<'emblem', $E.1, $OI>, x)>,
                            <pk(x.1), <'end_int', $OI, pk(x)>,
                             sign(<'end_int', $OI, pk(x)>, x.1)>
             ) ▶₀ #t3 )
        case OrgRootKeyLearn
        by contradiction /* from formulas */
      qed
    next
      case c_sign
      solve( !KU( ~rootKey ) @ #vk.41 )
        case Reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma RootKeyUse:
  all-traces
  "∀ oi rk #t.
    (UsedRootKey( oi, rk ) @ #t) ⇒
    (∃ ca caSk log certBody1 certBody2 oi.1 tlsPk #x #y #z.
      ((((CASk( ca, caSk ) @ #x) ∧
         (certBody1 = <'cert', ca, oi.1, tlsPk>)) ∧
        (certBody2 = <'cert', ca, <oi.1, sha256(rk)>, tlsPk>)) ∧
       (LogInclusion( log, <certBody1, sign(certBody1, caSk)> ) @ #y)) ∧
      (LogInclusion( log, <certBody2, sign(certBody2, caSk)> ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ oi rk #t.
  (UsedRootKey( oi, rk ) @ #t)
 ∧
  ∀ ca caSk log certBody1 certBody2 oi.1 tlsPk #x #y #z.
   (CASk( ca, caSk ) @ #x) ∧
   (certBody1 = <'cert', ca, oi.1, tlsPk>) ∧
   (certBody2 = <'cert', ca, <oi.1, sha256(rk)>, tlsPk>) ∧
   (LogInclusion( log, <certBody1, sign(certBody1, caSk)> ) @ #y) ∧
   (LogInclusion( log, <certBody2, sign(certBody2, caSk)> ) @ #z)
  ⇒
   ⊥"
*/
simplify
solve( UsedRootKey( oi, rk ) @ #t )
  case VerifyAuthorityEndorsement
  solve( St_Verifier_5( ~rid, oi, pk(x), $E,
                        <pk(x.1), <'end_ext', oi.1, oi, pk(x)>,
                         sign(<'end_ext', oi.1, oi, pk(x)>, x.1)>
         ) ▶₀ #t )
    case AuthRootKeyLearn
    solve( !KU( sign(<'MHTLeaf', $Log, <'cert', $CA, oi.1, tlsPk>,
                      sign(<'cert', $CA, oi.1, tlsPk>, ~skCA)>,
                     ~skCT)
           ) @ #vk.24 )
      case MHTLeafReq_case_1
      solve( !KU( sign(<'MHTLeaf', $Log,
                        <'cert', $CA, <oi.1, sha256(pk(x.1))>, tlsPk>,
                        sign(<'cert', $CA, <oi.1, sha256(pk(x.1))>, tlsPk>, ~skCA)>,
                       ~skCT)
             ) @ #vk.29 )
        case MHTLeafReq_case_1
        by contradiction /* from formulas */
      next
        case MHTLeafReq_case_2
        by contradiction /* from formulas */
      next
        case c_sign
        by solve( !KU( ~skCT ) @ #vk.39 )
      qed
    next
      case MHTLeafReq_case_2
      solve( !KU( sign(<'MHTLeaf', $Log,
                        <'cert', $CA, <oi.1, sha256(pk(x.1))>, tlsPk>,
                        sign(<'cert', $CA, <oi.1, sha256(pk(x.1))>, tlsPk>, ~skCA)>,
                       ~skCT)
             ) @ #vk.29 )
        case MHTLeafReq_case_1
        by contradiction /* from formulas */
      next
        case MHTLeafReq_case_2
        by contradiction /* from formulas */
      next
        case c_sign
        by solve( !KU( ~skCT ) @ #vk.39 )
      qed
    next
      case c_sign
      by solve( !KU( ~skCT ) @ #vk.36 )
    qed
  qed
next
  case VerifyOrganizationalEmblem
  solve( St_Verifier_2( ~rid,
                        <pk(x), <'emblem', $E, oi>, sign(<'emblem', $E, oi>, x)>,
                        <pk(x.1), <'end_int', oi, pk(x)>, sign(<'end_int', oi, pk(x)>, x.1)
                        >
         ) ▶₀ #t )
    case OrgRootKeyLearn
    solve( !KU( sign(<'MHTLeaf', $Log, <'cert', $CA, oi, tlsPk>,
                      sign(<'cert', $CA, oi, tlsPk>, ~skCA)>,
                     ~skCT)
           ) @ #vk.26 )
      case MHTLeafReq_case_1
      solve( !KU( sign(<'MHTLeaf', $Log,
                        <'cert', $CA, <oi, sha256(pk(x.1))>, tlsPk>,
                        sign(<'cert', $CA, <oi, sha256(pk(x.1))>, tlsPk>, ~skCA)>,
                       ~skCT)
             ) @ #vk.32 )
        case MHTLeafReq_case_1
        by contradiction /* from formulas */
      next
        case MHTLeafReq_case_2
        by contradiction /* from formulas */
      next
        case c_sign
        by solve( !KU( ~skCT ) @ #vk.44 )
      qed
    next
      case MHTLeafReq_case_2
      solve( !KU( sign(<'MHTLeaf', $Log,
                        <'cert', $CA, <oi, sha256(pk(x.1))>, tlsPk>,
                        sign(<'cert', $CA, <oi, sha256(pk(x.1))>, tlsPk>, ~skCA)>,
                       ~skCT)
             ) @ #vk.32 )
        case MHTLeafReq_case_1
        by contradiction /* from formulas */
      next
        case MHTLeafReq_case_2
        by contradiction /* from formulas */
      next
        case c_sign
        by solve( !KU( ~skCT ) @ #vk.44 )
      qed
    next
      case c_sign
      by solve( !KU( ~skCT ) @ #vk.41 )
    qed
  qed
qed

restriction Eq:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction Neq:
  "∀ a b #i. (Neq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction OnlyOnce:
  "∀ #i #j a.
    ((OnlyOnce( a ) @ #i) ∧ (OnlyOnce( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.2.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-09-02 13:40:44.835695 UTC
*/

end
