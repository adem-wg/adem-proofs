theory ADEM
begin

heuristic: o "./oracle.py"

builtins: signing

// TLS
functions: tlsClientMsg/4, tlsServerMsg/4, tlsClientReceive/2,
  tlsServerReceive/2

equations:
  tlsClientReceive(tlsServerMsg(sess, d, sk, m), sess) = m
, tlsServerReceive(tlsClientMsg(sess, d, pk(sk), m), sk) = m
, tlsServerReceive(tlsClientMsg(sess, d, pk(sk), m), sk) = sess

functions: sha256/1

/* -------------------- */
/*   Environment rules  */
/* -------------------- */

// DNS
rule DomainRegister:
  [ DomainRegister($A, d) ]
  --[ OnlyOnce(<'domain_register', d>)
    , NoTuple(d) ]->
  [ !DomainOwner($A, d) ]

restriction NoTuple:
  "All m #t. NoTuple(m) @ #t ==> (not Ex l r. m = <l, r>)"

rule SubdomainRegister:
  [ DomainRegister($A, <d, sub>), !DomainOwner($A, d) ]
  --[ OnlyOnce(<'domain_register', <d, sub>>) ]->
  [ !DomainOwner($A, <d, sub>) ]
  
  rule DomainCompromise:
  [ In($A), In(d) ]
  --[ CompromisedDomainOwner($A)
    , SomeCompromise() ]->
    [ DomainRegister($A, d) ]
    
/* ---------------------- */
/*   Protocol rules: CAs  */
/* ---------------------- */

rule CA:
  [ Fr(~skCA) ]
  --[ CASk($CA, ~skCA)
    , OnlyOnce(<'CA', $CA>) ]->
  [ !CA($CA, ~skCA), Out(pk(~skCA)) ]

rule FraudulentCertificate:
  [ !CA($CA, ~skCA), In(m) ]
  --[ SigningOracleCA($CA, m)
    , CompromisedCA($CA)
    , CompromisedParty($CA)
    , SomeCompromise() ]->
  [ Out(sign(m, ~skCA)) ]

rule TLSKeyRegister:
  [ !DomainOwner($A, d), !CA($CA, skCA), Fr(~skUser) ]
  --[ OnlyOnce(<'tls_key', d>)
    , TLSKeyGen(~skUser) ]->
  [ !TLSKey($A, $CA, d, ~skUser), Out(pk(~skUser)) ]

rule TLSKeyShare:
  [ !TLSKey($A, $CA, d1, ~skUser), !DomainOwner($A, d2) ]
  --[ TLSKeyShare(~skUser)
    , OnlyOnce(<'tls_key', d2>)
    , Eq(d1, fst(d2)) ]->
  [ !TLSKey($A, $CA, d2, ~skUser) ]

rule TLSKeyLeak:
  [ !TLSKey($A, $CA, d, ~skUser) ]
  --[ CompromisedTLSKey(~skUser)
    , SomeCompromise() ]->
  [ Out(~skUser) ]

rule CertificateRequest:
  [ !DomainOwner($A, d), !TLSKey($A, $CA, d, ~skTLS), !CA($CA, ~skCA) ]
  --[ OnlyOnce(<'certificate', d>) ]->
  [  Out(sign(<'cert', $CA, d, pk(~skTLS)>, ~skCA)) ]


/* -------------------------- */
/*   Protocol rules: CT Logs  */
/* -------------------------- */

rule LogRegister:
  [ Fr(~skCT) ]
  --[ IsLog($Log) ]->
  [ !Log($Log, ~skCT) ]

rule Submit:
  let certBody = <'cert', $CA, d, pk>
  in
  [ !CA($CA, skCA), !Log($Log, skCT)
  , In(<certBody, certSig>)
  ]--[ Eq(verify(certSig, certBody, pk(skCA)), true)
    , Eq(fst(snd(certBody)), $CA)
    , LogInclusion($Log, <certBody, certSig>) ]->
  [ !MHTLeaf($Log, <certBody, certSig>) ]

rule AdversarialAppend:
  [ In(msg) ]
  --[ LogInclusion($Log, msg)
    , CompromisedParty($Log)
    , SomeCompromise() ]->
  [ !MHTLeaf($Log, msg) ]

rule MHTLeafReq:
  let certBody = <'cert', $CA, d, pk>
  in
  [ !CA($CA, skCA), !Log($Log, skCT)
  , !MHTLeaf($Log, <certBody, certSig>)
  , In(<'MHTLeafReq', $Log, d>)
  ]
  --[ LeafReq($Log) ]->
  [ Out(sign(<'MHTLeaf', $Log, <certBody, certSig>>, skCT)) ]


/* ------------------------------- */
/*   Protocol rules: ADEM Parties  */
/* ------------------------------- */

// Root Keys
rule Ltk:
  [ Fr(~rootKey) ]
  -->
  [ !Ltk($A, ~rootKey), Out(pk(~rootKey)) ]

rule Reveal:
  [ !Ltk($A, ~ltk) ]
  --[ CompromisedADEMParty($A, pk(~ltk))
    , CompromisedParty($A)
    , SomeCompromise() ]->
  [ Out(~ltk) ]

rule AssetKey:
  [ Fr(~assetKey) ]
  -->
  [ !LtkAsset($A, ~assetKey), Out(pk(~assetKey)) ]

rule RevealAsset:
  [ !LtkAsset($A, ~ltk) ]
  --[ CompromisedAssetKey($A, pk(~ltk))
    , SomeCompromise() ]->
  [ Out(~ltk) ]

rule RootSetupDomains:
  let rootD = <$OI, sha256(pk(~rootKey))>
  in
  [ !Ltk($Party, ~rootKey) ]
  --[ OnlyOnce(<'root', $OI>)
    , IsRootPK($Party, $OI, pk(~rootKey))
    , OI($Party, $OI) ]->
  [ DomainRegister($Party, $OI), DomainRegister($Party, rootD)
  , !RootDomains($Party, ~rootKey, $OI, rootD) ]

rule RootSetupCertificates:
  let bodyOiCert = <'cert', $CA, oi, pk(tlsSk)>
      bodyRootCert = <'cert', $CA, rootD, pk(tlsSk)>
  in
  [ !CA($CA, skCA), !RootDomains($P, ~rootKey, oi, rootD)
  , !TLSKey($P, $CA, oi, tlsSk), !TLSKey($P, $CA, rootD, tlsSk)
  , !MHTLeaf($Log, <bodyOiCert, sigOiCert>), !MHTLeaf($Log, <bodyRootCert, sigRootCert>) ]
  --[ OnlyOnce(<'root_setup', oi>)
    , Eq(verify(sigOiCert, bodyOiCert, pk(skCA)), true)
    , Eq(verify(sigRootCert, bodyRootCert, pk(skCA)), true) ]->
  [ !RootSetup($P, ~rootKey, oi, rootD) ]

rule MonitorLogs:
  let cert = <'cert', $SigningCA, d, pkTLS>
  in
  [ !MHTLeaf($Log, <cert, sig>), !TLSKey($P, $CA, d, skTLS) ]
  --[ Neq(pk(skTLS), pkTLS)
    , Dispute($P, $Log, $SigningCA, d, pkTLS) ]->
  []

// ADEM endorsements and emblem distribution
rule Asset:
  [ !LtkAsset($E, assetKey), !RootSetup($P, rootKey, oi, rootD) ]
  --[ IsAsset($P, $E, pk(assetKey))
    , OnlyOnce(<'asset', $E>) ]->
  [ !AssetOf($P, $E, assetKey) ]

rule EndorseAsset:
  [ !AssetOf($P, $E, assetKey)
  , !RootDomains($P, rootKey, oi, rootD) ]
  --[ OnlyOnce(<'end_int', $E>) ]->
  [ Out(sign(<'end_int', oi, pk(assetKey)>, rootKey)) ]

rule EndorseParty:
  [ !RootDomains($Endorsed, rootKeyT, oiT, rootDT)
  , !RootDomains($Endorser, rootKeyS, oiS, rootDS) ]
  -->
  [ Out(sign(<'end_ext', oiS, oiT, pk(rootKeyT)>, rootKeyS)) ]

rule SendEmblem:
  [ !AssetOf($P, $E, assetKey), !RootDomains($P, rootKey, oi, rootD) ]
  -->
  [ Out(sign(<'emblem', $E, oi>, assetKey)) ]


/* ---------------------------- */
/*   Protocol rules: Verifiers  */
/* ---------------------------- */

rule Verifier_init:
    [ Fr(~rid) ]
    -->
    [ Setup_Verifier(~rid) ]

rule ReceiveNoEmblem:
  [ Setup_Verifier(~rid) ]
  -->
  [ St_Verifier_0(~rid), Out('INVALID') ]

rule ReceiveInvalidEmblem:
  let emblemBody = <'emblem', tail>
  in
  [ Setup_Verifier(~rid), In(<epk, emblemBody, emblemSignature>) ]
  --[ Neq(verify(emblemSignature, emblemBody, epk), true) ]->
  [ St_Verifier_0(~rid), Out('INVALID') ]

rule ReceiveMultipleEmblem:
  let emblemBody0 = <'emblem', $E0>
      emblemBody1 = <'emblem', $E1>
  in
  [ Setup_Verifier(~rid)
  , In(<epk0, emblemBody0, emblemSignature0>)
  , In(<epk1, emblemBody1, emblemSignature1>) ]
  --[ Eq(verify(emblemSignature0, emblemBody0, epk0), true)
    , Eq(verify(emblemSignature1, emblemBody1, epk1), true) ]->
  [ St_Verifier_0(~rid), Out(<'INVALID'>) ]

rule ReceiveUnsignedEmblem:
  [ Setup_Verifier(~rid), In(<'emblem', $E>) ]
  -->
  [ St_Verifier_0(~rid), Out(<'UNSIGNED', $E>) ]

rule ReceiveSignedEmblem:
  let emblemBody = <'emblem', $E>
  in
  [ Setup_Verifier(~rid), In(<epk, emblemBody, emblemSignature>) ]
  --[ Eq(verify(emblemSignature, emblemBody, epk), true) ]->
  [ St_Verifier_0(~rid), Out(<'SIGNED', $E>) ]

rule ReceiveOrganizationalEmblem:
  let emblemBody = <'emblem', $E, oi>
      endBody = <'end_int', oi, epk>
  in
  [ Setup_Verifier(~rid) 
  , !CA($CA, skCA), !Log($Log, skCT)
  , In(<epk, emblemBody, emblemSignature>)
  , In(<rootKey, endBody, endSignature>)
  ]
  -->
  [ St_Verifier_1(~rid, <epk, emblemBody, emblemSignature>, <rootKey, endBody, endSignature>)
  , Out(<'MHTLeafReq', $Log, oi>)
  , Out(<'MHTLeafReq', $Log, <oi, sha256(rootKey)>>)
  ]

rule OrgRootKeyLearn:
  let emblemBody = <'emblem', $E, oi>
      endBody = <'end_int', oi, epk>
      rootKeyHash=sha256(rootKey)
      certOi = <'cert', $CA, oi, tlsPk>
      certOiLeaf = <'MHTLeaf', $Log, <certOi, certOiSig>>
      certRootD = <'cert', $CA, <oi, rootKeyHash>, tlsPk>
      certRootDLeaf = <'MHTLeaf', $Log, <certRootD, certRootDSig>>
  in
  [ St_Verifier_1(~rid, <epk, emblemBody, emblemSignature>, <rootKey, endBody, endSignature>)
  , !CA($CA, skCA), !Log($Log, skCT)
  , In(<certOiLeaf, ctSigOi>)
  , In(<certRootDLeaf, ctSigRootD>) 
  ]
  --[ Eq(verify(ctSigOi, certOiLeaf, pk(skCT)), true)
    , Eq(verify(ctSigRootD, certRootDLeaf, pk(skCT)), true)
    , Eq(verify(certOiSig, certOi, pk(skCA)), true)
    , Eq(verify(certRootDSig, certRootD, pk(skCA)), true)
    , VerifiedRootKey(oi, rootKeyHash)
    , RootCertVerified(<certRootD, certRootDSig>)
    , LogInclusionVerified($Log, certOi)
    , LogInclusionVerified($Log, certRootD) ]->
  [ St_Verifier_2(~rid, <epk, emblemBody, emblemSignature>, <rootKey, body, signature>) ]

rule VerifyOrganizationalEmblem:
  let emblemBody = <'emblem', $E, oi>
      body = <'end_int', oi, epk>
  in
  [ St_Verifier_2(~rid, <epk, emblemBody, emblemSignature>, <rootKey, body, signature>) ]
  --[ VerifiedEndorsed(~rid, oi, $E, epk)
    , VerifiedRootEndorsement(~rid, oi, rootKey)
    , UsedRootKey(oi, rootKey)
    , Eq(verify(emblemSignature, emblemBody, epk), true)
    , Eq(verify(signature, body, rootKey), true) ]->
  [ St_Verifier_3(~rid, oi, rootKey, $E)
  , Out(<'SIGNED', $E>)
  , Out(<'ORGANIZATIONAL', oi, $E>) ]

// Non-deterministically choose to terminate
rule VerifyAuthorityEndorsementsTerminate:
  [ St_Verifier_3(~rid, oi, rootKey, $E) ]
  -->
  [ St_Verifier_0(~rid) ]

rule ReceiveAuthorityEndorsement:
  let endBody = <'end_ext', auth, oi, rootKey>
      rootKeyHash = sha256(authPk)
  in
  [ St_Verifier_3(~rid, oi, rootKey, $E)
  , !CA($CA, skCA), !Log($Log, skCT)
  , In(<authPk, endBody, endSignature>) ]
  -->
  [ St_Verifier_4(~rid, oi, rootKey, $E, <authPk, endBody, endSignature>)
  , Out(<'MHTLeafReq', $Log, auth>)
  , Out(<'MHTLeafReq', $Log, <auth, rootKeyHash>>) 
  ]

rule AuthRootKeyLearn:
  let endBody = <'end_ext', auth, oi, rootKey>
      rootKeyHash = sha256(authPk)
      certOi = <'cert', $CA, auth, tlsPk>
      certOiLeaf = <'MHTLeaf', $Log, <certOi, certOiSig>>
      certRootD = <'cert', $CA, <auth, rootKeyHash>, tlsPk>
      certRootDLeaf = <'MHTLeaf', $Log, <certRootD, certRootDSig>>
  in
  [ St_Verifier_4(~rid, oi, rootKey, $E, <authPk, endBody, endSignature>)
  , !CA($CA, skCA), !Log($Log, skCT)
  , In(<certOiLeaf, ctSigOi>)
  , In(<certRootDLeaf, ctSigRootD>) 
  ]
  --[ Eq(verify(ctSigOi, certOiLeaf, pk(skCT)), true)
    , Eq(verify(ctSigRootD, certRootDLeaf, pk(skCT)), true)
    , Eq(verify(certOiSig, certOi, pk(skCA)), true)
    , Eq(verify(certRootDSig, certRootD, pk(skCA)), true)
    , VerifiedRootKey(auth, rootKeyHash)
    , RootCertVerified(<certRootD, certRootDSig>)
    , LogInclusionVerified($Log, certOi)
    , LogInclusionVerified($Log, certRootD) ]->
  [ St_Verifier_5(~rid, oi, rootKey, $E, <authPk, endBody, endSignature>) ]
  
rule VerifyAuthorityEndorsement:
  let endBody = <'end_ext', auth, oi, rootKey>
  in
  [ St_Verifier_5(~rid, oi, rootKey, $E, <authPk, endBody, endSignature>) ]
  --[ Neq(auth, oi)
    , Eq(verify(endSignature, endBody, authPk), true)
    , VerifiedAuthorityEndorsement(~rid, auth, authPk, oi, rootKey)
    , UsedRootKey(auth, authPk) ]->
  [ St_Verifier_3(~rid, oi, rootKey, $E)
  , Out(<'ENDORSED', auth>) ]


/* ------------------------- */
/*   Lemmas and properties   */
/* ------------------------- */

// Certificate authorities
lemma TLSKeyShareRecursion[use_induction,reuse]:
  "All k #t1. TLSKeyShare(k) @ #t1 ==> Ex #t2. TLSKeyGen(k) @ #t2"

lemma TLSKeyLeakRecursion[use_induction,reuse]:
  "All k #t. CompromisedTLSKey(k) @ #t ==> Ex #x. TLSKeyGen(k) @ #x"

lemma WrongCAKeyUseImpliesCompromise[reuse]:
  "All tag m ca caSk #t1 #t2.
        ( CASk(ca, caSk) @ #t1
        & !KU(<<tag, m>, sign(<'tag', m>, caSk)>) @ #t2
        & not (tag = 'cert'))
    ==> (Ex #x. CompromisedCA(ca) @ #x & CompromisedParty(ca) @ #x)"

// ADEM root keys
lemma CanObtainRootKey:
  exists-trace
  " (Ex oi rootKeyHash #t. VerifiedRootKey(oi, rootKeyHash) @ #t)
  & (not Ex #x. SomeCompromise() @ #x)"

// ADEM endorsements and emblem distribution
lemma CanReceiveEmblem:
  exists-trace
  " (Ex id oi asset assetKey rootKey authOi1 authOi2 authPk1 authPk2 p1 p2 #a #b #c #d #e #f.
      VerifiedEndorsed(id, oi, asset, assetKey) @ #a
    & VerifiedRootEndorsement(id, oi, rootKey) @ #b
    & VerifiedAuthorityEndorsement(id, authOi1, authPk1, oi, rootKey) @ #c
    & VerifiedAuthorityEndorsement(id, authOi2, authPk2, oi, rootKey) @ #d
    & IsRootPK(p1, authOi1, authPk1) @ #e
    & IsRootPK(p2, authOi2, authPk2) @ #f
    & not (authOi1 = authOi2))
  & (not Ex #x. SomeCompromise() @ #x)"

lemma VerifiedAuthorityOrigin[reuse,use_induction]:
  "All loop auth authKey oi rootKey #t1. VerifiedAuthorityEndorsement(loop, auth, authKey, oi, rootKey) @ #t1
    ==> ( (Ex #t2. VerifiedRootEndorsement(loop, oi, rootKey) @ #t2 & #t2 < #t1)
        & (All p1 p2 rk1 rk2 #t2 #t3. VerifiedRootEndorsement(loop, p1, rk1) @ #t2
                & VerifiedRootEndorsement(loop, p2, rk2) @ #t3
            ==> oi = p1 & p1 = p2 & #t2 = #t3 & rootKey = rk1 & rk1 = rk2))"

/* Authentication: If an endorsed emblem is successfully verified then the emblem claims protection for an actually protected 
    asset that belongs to the organization endorsed. */
lemma AuthenticEmblem:
  "All id oi asset assetKey rootKey #t1 #t2.
        ( VerifiedEndorsed(id, oi, asset, assetKey) @ #t1
        & VerifiedRootEndorsement(id, oi, rootKey) @ #t2)
    ==> ( (Ex pp #x #y. OI(pp, oi) @ #x & IsAsset(pp, asset, assetKey) @ #y)
        | (Ex p #x #y. OI(p, oi) @ #x & CompromisedADEMParty(p, rootKey) @ #y)
        | (Ex otherA #x. CompromisedAssetKey(otherA, assetKey) @ #x)
        | (not Ex authOi authPk endorsedKey #t3. VerifiedAuthorityEndorsement(id, authPk, authOi, oi, endorsedKey) @ #t3)
        | (All authOI authPk endorsedKey #x. VerifiedAuthorityEndorsement(id, authOI, authPk, oi, endorsedKey) @ #x
            ==> ( (Ex p #y #z. OI(p, authOI) @ #y & CompromisedADEMParty(p, authPk) @ #z)
                | (not Ex p #y. IsRootPK(p, authOI, authPk) @ #y))))"

/* Accountability constraints:
    (1) If a domain owner monitors a fraudulent certificate issued for their domain, then the signing CA misbehaved.
    (2) If an authority endorsed a fraudulent public key, the authority misbehaved.
    (3) If a PP endorsed a fraudulent public key, the PP misbehaved.
*/
lemma CanDisupte:
  exists-trace
  "Ex p log ca d pk #t. Dispute(p, log, ca, d, pk) @ #t"

lemma CAAccountability:
  "All p log ca d pk skCA #x #y #z.
        ( Dispute(p, log, ca, d, pk) @ #x
        & CASk(ca, skCA) @ #y
        & LogInclusion(log, <<'cert', ca, d, pk>, sign(<'cert', ca, d, pk>, skCA)>) @ #z)
    ==> (Ex #a. CompromisedParty(ca) @ #a)"

lemma AuthorityAccountability:
  "All p pAuth oi rk_true rk_false id oiAuth rkAuth #t1 #t2 #t3.
        ( IsRootPK(p, oi, rk_true) @ #t1
        & IsRootPK(pAuth, oiAuth, rkAuth) @ #t2
        & VerifiedAuthorityEndorsement(id, oiAuth, rkAuth, oi, rk_false) @ #t3
        & not (rk_true = rk_false))
    ==> (Ex #a. CompromisedParty(pAuth) @ #a)"

lemma PPAccountability:
  "All p oi rk e1 assetKey id #t1 #t2 #t3.
        ( IsRootPK(p, oi, rk) @ #t1
        & VerifiedRootEndorsement(id, oi, rk) @ #t2
        & VerifiedEndorsed(id, oi, e1, assetKey) @ #t3
        // NOTE: It is correct to not require that e1 and e2 are the same
        // because in our threat model, the attacker could use they assetKey
        // for one asset anyways, but not in this model.
        & (not Ex e2 #x. IsAsset(p, e2, assetKey) @ #x))
    ==> (Ex #a. CompromisedParty(p) @ #a)"

lemma RootKeyUse:
  "All oi rk #t.
        UsedRootKey(oi, rk) @ #t
    ==> (Ex ca caSk log certBody1 certBody2 oi tlsPk #x #y #z.
            CASk(ca, caSk) @ #x
          & certBody1 = <'cert', ca, oi, tlsPk>
          & certBody2 = <'cert', ca, <oi, sha256(rk)>, tlsPk>
          & LogInclusion(log, <certBody1, sign(certBody1, caSk)>) @ #y
          & LogInclusion(log, <certBody2, sign(certBody2, caSk)>) @ #z)"

restriction Eq:
    "All a b #i. Eq(a, b) @ #i ==> a = b"

restriction Neq:
  "All a b #i. Neq(a, b) @ #i ==> not (a = b)"

restriction OnlyOnce:
  "All #i #j a. OnlyOnce(a) @ #i & OnlyOnce(a) @ #j ==> #i = #j"

end
